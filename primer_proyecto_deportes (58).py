# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

st.set_page_config(page_title="UFC Value Betting & Bankroll Simulator", layout="wide")
st.title("UFC Value Betting & Bankroll Simulator")

@st.cache_data
def load_data(uploaded_file):
    return pd.read_csv(uploaded_file)

@st.cache_resource
def load_model(model_path):
    return joblib.load(model_path)

uploaded_file = st.file_uploader("Upload your merged historical dataset CSV", type="csv")
model_file = st.file_uploader("Upload your trained UFC model (.pkl)", type="pkl")

if uploaded_file and model_file:
    df = load_data(uploaded_file)
    model = load_model(model_file)
    # Get expected features from model
    try:
        expected_features = list(model.feature_names_in_)
        st.write("Model expects these features:", expected_features)
    except AttributeError:
        st.warning("Model does not have 'feature_names_in_'.")
        expected_features = [
            # manually type the order here if needed!
        ]

    st.write("Your CSV columns:", df.columns.tolist())

    # Try to map your CSV columns to model expected features
    col_map = {
        'RedOdds': 'R_odds',
        'BlueOdds': 'B_odds',
        # add other mappings here, following your model and CSV!
    }
    for model_col in expected_features:
        if model_col in col_map and col_map[model_col] in df.columns:
            df[model_col] = df[col_map[model_col]]
        elif model_col not in df.columns:
            df[model_col] = 0  # default if totally missing

    # Now select columns in the exact order
    X = df[expected_features]

    # Proceed with prediction and the rest as before
    probs = model.predict_proba(X)[:, 1]
    # ... rest of your code for value bets, simulation, etc.

else:
    st.info("Upload both your merged historical dataset CSV and trained model (.pkl) to start.")
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import joblib
import numpy as np

st.title("UFC Value Betting Simulator")

# --- Model columns expected ---
MODEL_FEATURES = [
    'RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
    'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif'
]

# --- Feature engineering ---
def add_engineered_features(df):
    # Rename odds
    df['RedOdds'] = df['R_odds']
    df['BlueOdds'] = df['B_odds']

    # If missing, fill expected value with zeros (placeholder)
    for col in ['RedExpectedValue', 'BlueExpectedValue']:
        if col not in df.columns:
            df[col] = 0.0

    # Engineered diffs (use 0 if missing data)
    df['WinStreakDif'] = df.get('r_wins_total', 0).fillna(0) - df.get('b_wins_total', 0).fillna(0)
    df['LossDif'] = df.get('r_losses_total', 0).fillna(0) - df.get('b_losses_total', 0).fillna(0)
    df['KODif'] = df.get('r_kd', 0).fillna(0) - df.get('b_kd', 0).fillna(0)
    df['SubDif'] = df.get('r_sub_att', 0).fillna(0) - df.get('b_sub_att', 0).fillna(0)
    df['HeightDif'] = df.get('r_height', 0).fillna(0) - df.get('b_height', 0).fillna(0)
    df['ReachDif'] = df.get('r_reach', 0).fillna(0) - df.get('b_reach', 0).fillna(0)
    df['AgeDif'] = df.get('r_age', 0).fillna(0) - df.get('b_age', 0).fillna(0)

    # Only keep model columns
    return df

# --- Value bet logic ---
def implied_prob(odds):
    return 1 / odds if odds and odds > 0 else np.nan

def find_value_bets(df, model, edge_threshold=0.05):
    X = df[MODEL_FEATURES]
    preds = model.predict_proba(X)[:,1] # Probability red wins
    df['RedProb'] = preds
    df['BlueProb'] = 1 - preds
    df['RedImplied'] = df['RedOdds'].apply(implied_prob)
    df['BlueImplied'] = df['BlueOdds'].apply(implied_prob)
    df['RedEdge'] = df['RedProb'] - df['RedImplied']
    df['BlueEdge'] = df['BlueProb'] - df['BlueImplied']

    # Filter by value bet threshold
    value_bets = []
    for idx, row in df.iterrows():
        if row['RedEdge'] >= edge_threshold:
            value_bets.append({'BetOn': 'Red', **row})
        if row['BlueEdge'] >= edge_threshold:
            value_bets.append({'BetOn': 'Blue', **row})

    value_bets = pd.DataFrame(value_bets)
    return df, value_bets

# --- Bankroll simulation ---
def simulate_bankroll(bets, stake=1.0, starting_bankroll=10000):
    bankroll = starting_bankroll
    wins = 0
    losses = 0
    for i, row in bets.iterrows():
        if row['BetOn'] == 'Red':
            bet_prob = row['RedProb']
            odds = row['RedOdds']
            won = (row.get('winner', '').lower() == 'red')
        else:
            bet_prob = row['BlueProb']
            odds = row['BlueOdds']
            won = (row.get('winner', '').lower() == 'blue')
        if odds <= 0 or np.isnan(odds): continue # skip bad odds
        if won:
            bankroll += stake * (odds - 1)
            wins += 1
        else:
            bankroll -= stake
            losses += 1
    roi = ((bankroll - starting_bankroll) / (stake * (wins + losses))) * 100 if (wins+losses) else 0
    win_pct = (wins / (wins + losses)) * 100 if (wins + losses) else 0
    stats = {
        "Total Bets": wins + losses,
        "Wins": wins,
        "Losses": losses,
        "Win %": round(win_pct, 2),
        "ROI %": round(roi, 2),
        "Final Bankroll": round(bankroll, 2)
    }
    return stats

# --- Streamlit UI ---
uploaded_file = st.file_uploader("Upload your UFC fights CSV (with odds)", type=['csv'])
model_file = st.file_uploader("Upload your trained UFC model (.pkl or .joblib)", type=['pkl', 'joblib'])

if uploaded_file and model_file:
    df = pd.read_csv(uploaded_file)
    try:
        model = joblib.load(model_file)
    except Exception as e:
        st.error(f"Could not load model: {e}")
        st.stop()

    # Only use rows with both odds
    df = df[df['R_odds'].notnull() & df['B_odds'].notnull()].copy()
    st.write(f"Total rows with odds: {len(df)}")
    df = add_engineered_features(df)
    missing = [col for col in MODEL_FEATURES if col not in df.columns]
    if missing:
        st.error(f"Missing required columns: {missing}")
        st.stop()
    edge = st.slider("Minimum value bet edge (e.g., 0.05 = 5%)", 0.01, 0.2, 0.05, step=0.01)
    stake = st.number_input("Flat Stake per Bet", min_value=1.0, max_value=500.0, value=10.0)
    bankroll = st.number_input("Starting Bankroll", min_value=100.0, max_value=100000.0, value=10000.0)

    df, value_bets = find_value_bets(df, model, edge)
    st.write("Sample Value Bets:", value_bets.head())

    stats = simulate_bankroll(value_bets, stake, bankroll)
    st.subheader("Simulation Stats")
    st.json(stats)
else:
    st.info("Upload your CSV with R_odds/B_odds and your model file to begin.")
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os

# ---- SETTINGS ----
MODEL_PATH = '/mnt/data/ufc_model.pkl'
DEFAULT_CSV = '/mnt/data/your_merged_historical_dataset.csv'
VALUE_EDGE = 0.05   # 5% edge

# ---- HELPER FUNCTIONS ----

@st.cache_data
def load_data(uploaded_file):
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_csv(DEFAULT_CSV)
    return df

@st.cache_resource
def load_model(path):
    return joblib.load(path)

def ensure_feature_columns(df, required_cols):
    missing = [c for c in required_cols if c not in df.columns]
    for c in missing:
        df[c] = 0
    return df

def calculate_value_bets(df, model, feature_cols, edge=0.05):
    # Ensure all feature columns exist
    df = ensure_feature_columns(df, feature_cols)
    X = df[feature_cols].fillna(0)
    probs = model.predict_proba(X)[:, 1]  # Probability Red wins
    df['RedProb'] = probs
    df['BlueProb'] = 1 - probs
    df['RedEV'] = df['RedProb'] * (df['R_odds'] - 1) - (1 - df['RedProb'])
    df['BlueEV'] = df['BlueProb'] * (df['B_odds'] - 1) - (1 - df['BlueProb'])
    df['RedEdge'] = df['RedProb'] - 1/df['R_odds']
    df['BlueEdge'] = df['BlueProb'] - 1/df['B_odds']
    # Value bet is when edge > edge threshold
    value_bets = df[(df['RedEdge'] > edge) | (df['BlueEdge'] > edge)].copy()
    return value_bets

def simulate_bankroll(df, stake=100, method='kelly', initial_bankroll=1000):
    """Simulate bankroll growth with value bets in df.
    method: 'kelly' or 'flat'
    """
    bankroll = initial_bankroll
    results = []
    for _, row in df.iterrows():
        # Red value bet
        if row['RedEdge'] > row['BlueEdge']:
            prob = row['RedProb']
            odds = row['R_odds']
            bet = 0
            if method == 'kelly':
                kelly = ((prob * (odds - 1)) - (1 - prob)) / (odds - 1)
                kelly = max(0, min(kelly, 1))
                bet = bankroll * kelly
            else:
                bet = stake
            bet = min(bet, bankroll)  # never overbet
            if row['winner'] == 'Red':
                bankroll += bet * (odds - 1)
                win = True
            else:
                bankroll -= bet
                win = False
            results.append({
                'fighter': row['r_fighter'],
                'bet_on': 'Red',
                'odds': odds,
                'prob': prob,
                'bet': bet,
                'win': win,
                'bankroll': bankroll
            })
        # Blue value bet
        elif row['BlueEdge'] > row['RedEdge']:
            prob = row['BlueProb']
            odds = row['B_odds']
            bet = 0
            if method == 'kelly':
                kelly = ((prob * (odds - 1)) - (1 - prob)) / (odds - 1)
                kelly = max(0, min(kelly, 1))
                bet = bankroll * kelly
            else:
                bet = stake
            bet = min(bet, bankroll)
            if row['winner'] == 'Blue':
                bankroll += bet * (odds - 1)
                win = True
            else:
                bankroll -= bet
                win = False
            results.append({
                'fighter': row['b_fighter'],
                'bet_on': 'Blue',
                'odds': odds,
                'prob': prob,
                'bet': bet,
                'win': win,
                'bankroll': bankroll
            })
    return pd.DataFrame(results)

# ---- MAIN APP ----

st.title("UFC Value Bet Finder & Bankroll Simulator")

# --- File upload
uploaded_file = st.file_uploader("Upload UFC dataset (.csv)", type='csv')

# --- Load model
try:
    model = load_model(MODEL_PATH)
except Exception as e:
    st.error(f"Could not load model: {e}")
    st.stop()

# --- Load data
try:
    df = load_data(uploaded_file)
except Exception as e:
    st.error(f"Could not load data: {e}")
    st.stop()

# --- Get model's feature names
if hasattr(model, 'feature_names_in_'):
    feature_cols = list(model.feature_names_in_)
else:
    feature_cols = ['RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
                    'WinStreakDif', 'LossDif', 'KODif', 'SubDif',
                    'HeightDif', 'ReachDif', 'AgeDif']

# --- Value Edge input
edge = st.slider("Value Bet Edge Threshold (%)", min_value=1, max_value=20, value=5, step=1) / 100

# --- Find Value Bets
value_bets = calculate_value_bets(df, model, feature_cols, edge=edge)

st.subheader("Value Bets (filtered by edge)")
st.write(f"Found {len(value_bets)} value bets")
st.dataframe(value_bets[['event_name', 'r_fighter', 'b_fighter', 'R_odds', 'B_odds', 'RedProb', 'BlueProb', 'RedEdge', 'BlueEdge', 'RedEV', 'BlueEV']])

# --- Bankroll Simulation
st.subheader("Bankroll Simulation")

sim_method = st.radio("Betting method", ['kelly', 'flat'])
if sim_method == 'flat':
    flat_bet = st.number_input("Flat Stake Amount ($)", min_value=1, max_value=1000, value=100)
else:
    flat_bet = 100

start_bankroll = st.number_input("Starting Bankroll ($)", min_value=100, value=1000, step=100)

sim = simulate_bankroll(value_bets, stake=flat_bet, method=sim_method, initial_bankroll=start_bankroll)
if not sim.empty:
    st.line_chart(sim['bankroll'])
    stats = {
        'Total Bets': len(sim),
        'Wins': sim['win'].sum(),
        'Losses': len(sim) - sim['win'].sum(),
        'Win %': round(100 * sim['win'].sum() / max(1, len(sim)), 2),
        'ROI %': round(100 * (sim['bankroll'].iloc[-1] - start_bankroll) / start_bankroll, 2) if len(sim) else 0,
        'Final Bankroll': sim['bankroll'].iloc[-1] if len(sim) else start_bankroll
    }
    st.subheader("Simulation Stats")
    st.write(stats)
    st.dataframe(sim)
else:
    st.info("No value bets found with the current settings.")

# --- Download results
st.download_button("Download Value Bets CSV", value_bets.to_csv(index=False), file_name='value_bets.csv')
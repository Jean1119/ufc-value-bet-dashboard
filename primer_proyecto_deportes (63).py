# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

st.set_page_config(page_title="UFC Value Bet Simulator", layout="wide")

# ---- MODEL & DATA LOAD ----

@st.cache_data
def load_data(csv_path):
    return pd.read_csv(csv_path)

@st.cache_resource
def load_model(model_path):
    return joblib.load(model_path)

# ---- VALUE BET LOGIC ----

def implied_prob(odds):
    """Convert American odds to implied probability"""
    odds = float(odds)
    if odds > 0:
        return 100 / (odds + 100)
    else:
        return -odds / (-odds + 100)

def find_value_bets(df, model, edge_threshold=0.05):
    feature_cols = [
        "RedOdds", "BlueOdds", "RedExpectedValue", "BlueExpectedValue",
        "WinStreakDif", "LossDif", "KODif", "SubDif", "HeightDif", "ReachDif", "AgeDif"
    ]
    # Prepare features
    X = df[feature_cols]
    # Model probabilities (Red win)
    red_probs = model.predict_proba(X)[:, 1]
    blue_probs = 1 - red_probs

    df['model_red_prob'] = red_probs
    df['model_blue_prob'] = blue_probs

    # Implied probs from odds
    df['red_implied_prob'] = df['RedOdds'].apply(implied_prob)
    df['blue_implied_prob'] = df['BlueOdds'].apply(implied_prob)

    # Calculate value (edge)
    df['red_edge'] = df['model_red_prob'] - df['red_implied_prob']
    df['blue_edge'] = df['model_blue_prob'] - df['blue_implied_prob']

    # Identify value bets (where edge > threshold)
    value_bets = []
    for idx, row in df.iterrows():
        if row['red_edge'] > edge_threshold:
            value_bets.append({'idx': idx, 'side': 'Red', 'prob': row['model_red_prob'], 'odds': row['RedOdds'], 'edge': row['red_edge']})
        if row['blue_edge'] > edge_threshold:
            value_bets.append({'idx': idx, 'side': 'Blue', 'prob': row['model_blue_prob'], 'odds': row['BlueOdds'], 'edge': row['blue_edge']})
    return df, pd.DataFrame(value_bets)

def simulate_bankroll(df, value_bets, flat_bet=1.0, starting_bankroll=1000):
    bankroll = starting_bankroll
    bets = 0
    wins = 0
    losses = 0
    bet_history = []
    for _, bet in value_bets.iterrows():
        idx = bet['idx']
        side = bet['side']
        odds = bet['odds']
        # What was the winner?
        winner = df.loc[idx, 'winner']
        pick = 'Red' if side == 'Red' else 'Blue'
        # Determine win/loss
        if (pick == 'Red' and winner.lower() == 'red') or (pick == 'Blue' and winner.lower() == 'blue'):
            payout = flat_bet * (abs(odds) / 100) if odds < 0 else flat_bet * (odds / 100)
            bankroll += payout
            wins += 1
            bet_history.append(1)
        else:
            bankroll -= flat_bet
            losses += 1
            bet_history.append(0)
        bets += 1
    roi = ((bankroll - starting_bankroll) / (bets * flat_bet)) * 100 if bets > 0 else 0
    win_pct = (wins / bets) * 100 if bets > 0 else 0
    return {
        "Total Bets": bets,
        "Wins": wins,
        "Losses": losses,
        "Win %": round(win_pct, 2),
        "ROI %": round(roi, 2),
        "Final Bankroll": round(bankroll, 2),
        "Bet History": bet_history
    }

# ---- STREAMLIT UI ----

st.title("UFC Value Bet Simulator (Odds Guaranteed)")

uploaded_csv = st.file_uploader("Upload your merged dataset (.csv)", type=['csv'])
uploaded_model = st.file_uploader("Upload your trained model (.pkl)", type=['pkl'])

if uploaded_csv and uploaded_model:
    # Load data and model
    df = load_data(uploaded_csv)
    model = load_model(uploaded_model)
    # Filter to only rows with both odds present
    df = df[df['R_odds'].notnull() & df['B_odds'].notnull()].copy()
    st.write(f"Dataset: {len(df)} fights with both Red and Blue odds.")
    # Rename for model
    rename_map = {
        'R_odds': 'RedOdds',
        'B_odds': 'BlueOdds'
    }
    for k, v in rename_map.items():
        if k in df.columns:
            df[v] = df[k]
    # Make sure all expected features exist
    expected = [
        "RedOdds", "BlueOdds", "RedExpectedValue", "BlueExpectedValue",
        "WinStreakDif", "LossDif", "KODif", "SubDif", "HeightDif", "ReachDif", "AgeDif"
    ]
    for col in expected:
        if col not in df.columns:
            st.error(f"Missing required column: {col}")
    # User params
    st.sidebar.header("Value Bet Settings")
    edge = st.sidebar.slider("Value Edge Threshold (%)", 1, 20, 5) / 100
    stake = st.sidebar.number_input("Flat Bet Amount", min_value=1.0, max_value=100.0, value=10.0)
    bankroll = st.sidebar.number_input("Starting Bankroll", min_value=100.0, max_value=10000.0, value=1000.0)
    # Value bets and simulation
    df, value_bets = find_value_bets(df, model, edge)
    sim_stats = simulate_bankroll(df, value_bets, stake, bankroll)
    st.subheader("Simulation Stats")
    st.json({k: int(v) if isinstance(v, (np.integer,)) else v for k,v in sim_stats.items() if k != "Bet History"})
    st.line_chart(np.cumsum([stake if x else -stake for x in sim_stats["Bet History"]]))
    st.subheader("Sample Value Bets")
    st.write(value_bets.head(10))
else:
    st.info("Upload both your merged dataset and trained model to begin.")
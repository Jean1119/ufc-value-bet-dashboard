# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

def main():
    # Sidebar inputs
    st.sidebar.header("Settings")
    api_key = st.sidebar.text_input("Odds API Key", type="password")
    edge_threshold = st.sidebar.slider("Edge Threshold (pp)", 0, 100, 15)
    days_ahead = st.sidebar.slider("Show events in next N days", 1, 30, 7)
    filter_str = st.sidebar.text_input("Filter matchups (comma-separated)")

    if not api_key:
        st.warning("Enter your Odds API key in the sidebar to continue.")
        return

    # Build filters list
    if filter_str and filter_str.strip():
        filters = [term.strip().lower() for term in filter_str.split(",") if term.strip()]
    else:
        filters = []

    st.title("UFC Value Bet Dashboard")

    # 1) Load history
    with st.spinner("Loading historical data…"):
        df_hist = load_history()

    # 2) Load model
    with st.spinner("Loading calibrated model…"):
        model, features = load_model_and_features()

    # Show a preview
    st.subheader("Historical Data Preview")
    st.dataframe(df_hist.head(5))

    # 3) Fetch live odds
    with st.spinner("Fetching live odds…"):
        events = fetch_live_odds(api_key)

    # Build and display the odds table
    now = datetime.utcnow()
    cutoff = now + timedelta(days=days_ahead)
    odds_rows = []
    for ev in events:
        for bm in ev.get("bookmakers", []):
            markets = bm.get("markets", [])
            if not markets:
                continue
            mkt = markets[0]
            outcomes = mkt.get("outcomes", [])
            if len(outcomes) != 2:
                continue
            try:
                fight_time = datetime.fromisoformat(ev["commence_time"].replace("Z", ""))
            except:
                continue
            if not (now <= fight_time <= cutoff):
                continue
            f1, f2 = outcomes[0]["name"], outcomes[1]["name"]
            event_name = f"{f1} vs {f2}"
            if filters and not any(f in event_name.lower() for f in filters):
                continue
            odds_rows.append({
                "Event": event_name,
                "Time (UTC)": ev["commence_time"],
                f1: outcomes[0]["price"],
                f2: outcomes[1]["price"],
            })
    df_odds = pd.DataFrame(odds_rows)
    st.subheader("Live Odds")
    if df_odds.empty:
        st.info("No upcoming fights match your criteria.")
        return
    st.dataframe(df_odds)

    # 4) Compute value bets
    with st.spinner("Computing value bets…"):
        value_bets = []
        for _, row in df_odds.iterrows():
            fighters = [c for c in row.index if c not in ["Event", "Time (UTC)"]]
            if len(fighters) != 2:
                continue
            f1, f2 = fighters
            o1, o2 = row[f1], row[f2]

            # Find the matching historical fight
            mask = (
                (df_hist["RedFighter"] == f1) & (df_hist["BlueFighter"] == f2)
            ) | (
                (df_hist["RedFighter"] == f2) & (df_hist["BlueFighter"] == f1)
            )
            hist = df_hist[mask]
            if hist.empty:
                continue
            idx = hist.index[0]
            probs = model.predict_proba(hist.loc[[idx], features])[0]
            for fighter, odds, side in [(f1, o1, "Red"), (f2, o2, "Blue")]:
                ip = implied_prob(odds)
                p = probs[1] if side == "Red" else probs[0]
                edge = (p - ip) * 100
                if edge >= edge_threshold:
                    value_bets.append({
                        "Event": row["Event"],
                        "Fighter": fighter,
                        "Side": side,
                        "Odds": odds,
                        "Edge (pp)": round(edge, 1)
                    })
    if value_bets:
        df_vb = pd.DataFrame(value_bets).sort_values("Edge (pp)", ascending=False)
        st.table(df_vb)
    else:
        st.info("No value bets meet your threshold.")

    # 5) Staking simulation
    st.subheader("Staking Strategy Simulation")
    with st.spinner("Running staking simulation…"):
        BASE_EDGE, SAFE_EDGE = 5, 10
        BASE_STAKE, SAFE_STAKE = 0.02, 0.15
        bankroll = 10_000.0
        balances = []
        for vb in value_bets:
            frac = SAFE_STAKE if vb["Edge (pp)"] >= SAFE_EDGE else BASE_STAKE
            stake = bankroll * frac
            odds = vb["Odds"]
            payout = stake * (odds / 100) if odds > 0 else stake * (100 / abs(odds))
            # Lookup win from history:
            won = (
                ((df_hist["RedFighter"] == vb["Fighter"]) & (vb["Side"] == "Red") & (df_hist["Winner"] == "Red")) |
                ((df_hist["BlueFighter"] == vb["Fighter"]) & (vb["Side"] == "Blue") & (df_hist["Winner"] == "Blue"))
            ).any()
            profit = payout if won else -stake
            bankroll += profit
            balances.append(bankroll)

    if balances:
        st.line_chart(pd.DataFrame({"Bankroll": balances}, index=range(1, len(balances) + 1)))

    st.write(f"**Initial Bankroll:** $10,000")
    st.write(f"**Final Bankroll:** ${bankroll:,.2f}")
    st.write(f"**ROI:** {((bankroll - 10_000) / 10_000 * 100):.1f}%")

if __name__ == "__main__":
    main()
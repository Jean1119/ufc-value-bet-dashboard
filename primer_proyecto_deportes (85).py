# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd

# Cambia el nombre aquÃ­ si tu archivo CSV se llama distinto
CSV_FILE = "your_merged_historical_dataset (2).csv"

st.set_page_config(page_title="UFC Value Bets Dashboard", layout="wide")

st.title("ğŸ“Š UFC Value Bets Dashboard")

# Cargar el archivo CSV
@st.cache_data
def load_data():
    df = pd.read_csv(CSV_FILE)
    # Si tienes una columna 'start_time' o 'date', intenta convertirla a datetime
    if 'start_time' in df.columns:
        df['start_time'] = pd.to_datetime(df['start_time'], errors='coerce')
    if 'date' in df.columns:
        df['date'] = pd.to_datetime(df['date'], errors='coerce')
    return df

df = load_data()

# Filtro solo para peleas futuras (si tienes una columna de fecha)
if 'start_time' in df.columns:
    upcoming = df[df['start_time'] >= pd.Timestamp.now()]
elif 'date' in df.columns:
    upcoming = df[df['date'] >= pd.Timestamp.now()]
else:
    upcoming = df  # Si no hay fecha, muestra todo

st.markdown("### Filtros")

# Filtro por evento
event_list = sorted(upcoming['event'].dropna().unique())
selected_event = st.selectbox("Selecciona el evento", ["Todos"] + event_list)
if selected_event != "Todos":
    filtered = upcoming[upcoming['event'] == selected_event]
else:
    filtered = upcoming

# Filtro por rango de odds
if 'odds' in filtered.columns:
    min_odds = int(filtered['odds'].min())
    max_odds = int(filtered['odds'].max())
    odds_range = st.slider("Rango de Odds", min_odds, max_odds, (min_odds, max_odds))
    filtered = filtered[(filtered['odds'] >= odds_range[0]) & (filtered['odds'] <= odds_range[1])]

# Filtro por mÃ­nimo edge (valor)
if 'edge' in filtered.columns:
    min_edge = float(filtered['edge'].min())
    max_edge = float(filtered['edge'].max())
    edge_value = st.slider("Edge mÃ­nimo", float(round(min_edge, 3)), float(round(max_edge, 3)), (0.05, float(round(max_edge, 3))))
    filtered = filtered[(filtered['edge'] >= edge_value[0]) & (filtered['edge'] <= edge_value[1])]

# Mostrar tabla
st.markdown("### Value Bets Encontradas")
st.dataframe(filtered.reset_index(drop=True), use_container_width=True)

# Para exportar las apuestas filtradas
st.download_button(
    "Descargar Value Bets Filtradas (CSV)",
    data=filtered.to_csv(index=False).encode('utf-8'),
    file_name="value_bets_filtradas.csv",
    mime="text/csv"
)
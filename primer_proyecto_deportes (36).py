# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
import joblib
import os
from datetime import datetime, timedelta
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

# â”€â”€ PAGE CONFIG â”€â”€
st.set_page_config(page_title="UFC Value Bet Dashboard", layout="wide")

# â”€â”€ HELPERS â”€â”€

def list_csv_files():
    return [f for f in os.listdir() if f.endswith('.csv')]

@st.cache_data
def load_csv(name):
    return pd.read_csv(name)

@st.cache_data
def load_fighter_stats(stats_path):
    df_stats = pd.read_csv(stats_path)
    # Try various likely column names for the fighter's name
    name_cols = [c for c in df_stats.columns if 'name' in c.lower()]
    return df_stats, name_cols[0] if name_cols else None

def merge_fighter_stats(df, df_stats, name_col, red_col, blue_col):
    # Prepare Red/Blue stats
    stats_cols = [c for c in df_stats.columns if c != name_col]
    red_stats = df_stats.rename(columns={name_col: red_col})
    blue_stats = df_stats.rename(columns={name_col: blue_col})

    # Add suffixes to stat columns
    red_stats = red_stats.rename(columns={col: f"Red_{col}" for col in stats_cols})
    blue_stats = blue_stats.rename(columns={col: f"Blue_{col}" for col in stats_cols})

    df = df.merge(red_stats, how='left', left_on=red_col, right_on=red_col)
    df = df.merge(blue_stats, how='left', left_on=blue_col, right_on=blue_col)
    return df

@st.cache_resource
def train_model(df):
    features = [
        'RedOdds','BlueOdds','RedExpectedValue','BlueExpectedValue',
        'WinStreakDif','LossDif','KODif','SubDif',
        'HeightDif','ReachDif','AgeDif'
    ]
    # Remove missing values
    df_model = df[features + ['Winner']].dropna()
    le = LabelEncoder()
    df_model['WinnerEncoded'] = le.fit_transform(df_model['Winner'])
    X = df_model[features]
    y = df_model['WinnerEncoded']
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X, y)
    return model, features

def implied_prob(odds):
    try:
        return 100/(odds+100) if odds > 0 else abs(odds)/(abs(odds)+100)
    except:
        return np.nan

def get_value_bets(df, model, features, edge_thresh=15):
    bets = []
    for idx, row in df.iterrows():
        try:
            X_row = row[features].values.reshape(1, -1)
            probs = model.predict_proba(X_row)[0]  # [Blue, Red]
            for side, odd_col, prob in [('Red', 'RedOdds', probs[1]), ('Blue', 'BlueOdds', probs[0])]:
                odds = row[odd_col]
                if pd.isna(odds): continue
                imp = implied_prob(odds)
                edge = prob - imp
                if edge*100 >= edge_thresh:
                    bets.append({
                        "Event": f"{row['RedFighter']} vs {row['BlueFighter']}",
                        "Fighter": row['RedFighter'] if side == 'Red' else row['BlueFighter'],
                        "Side": side,
                        "Odds": odds,
                        "Edge (pp)": round(edge*100, 2)
                    })
        except Exception as e:
            continue
    return pd.DataFrame(bets)

def fetch_live_odds(api_key, region='us'):
    url = 'https://api.the-odds-api.com/v4/sports/mma_mixed_martial_arts/odds'
    params = {
        'apiKey': api_key,
        'regions': region,
        'markets': 'h2h',
        'oddsFormat': 'american'
    }
    resp = requests.get(url, params=params)
    if resp.status_code != 200:
        st.warning(f"API error {resp.status_code}: {resp.text}")
        return pd.DataFrame()
    data = resp.json()
    rows = []
    for ev in data:
        try:
            f1, f2 = [o['name'] for o in ev['bookmakers'][0]['markets'][0]['outcomes']]
            odds_dict = {o['name']: o['price'] for o in ev['bookmakers'][0]['markets'][0]['outcomes']}
            row = {
                "Event": f"{f1} vs {f2}",
                "RedFighter": f1,
                "BlueFighter": f2,
                "RedOdds": odds_dict.get(f1, np.nan),
                "BlueOdds": odds_dict.get(f2, np.nan)
            }
            rows.append(row)
        except Exception:
            continue
    return pd.DataFrame(rows)

# â”€â”€ MAIN APP â”€â”€

def main():
    st.title("ðŸ¥Š UFC Value Bet Dashboard")

    # SIDEBAR
    st.sidebar.header("Settings")
    api_key = st.sidebar.text_input("Odds API Key", type="password")
    edge_thresh = st.sidebar.slider("Value Bet Edge Threshold (pp)", 0, 50, 15, 1)

    st.sidebar.markdown("#### Select historical dataset:")
    csv_files = list_csv_files()
    dataset_name = st.sidebar.selectbox("Available .csv files:", csv_files, index=csv_files.index("large_dataset.csv") if "large_dataset.csv" in csv_files else 0)
    st.sidebar.markdown("#### Select fighter stats file:")
    stats_files = [f for f in csv_files if "stats" in f]
    stats_file = st.sidebar.selectbox("Available fighter stats files:", stats_files, index=0) if stats_files else None

    # Load Data
    df = load_csv(dataset_name)
    st.write(f"**Loaded dataset:** {dataset_name} ({len(df)} rows)")

    if stats_file:
        df_stats, name_col = load_fighter_stats(stats_file)
        if name_col and 'RedFighter' in df.columns and 'BlueFighter' in df.columns:
            df = merge_fighter_stats(df, df_stats, name_col, 'RedFighter', 'BlueFighter')
            st.write(f"Fighter stats merged using '{name_col}' column from {stats_file}")
        else:
            st.warning("Fighter stats not merged: Required columns not found.")
    else:
        st.warning("No fighter stats file selected.")

    # Train model
    model, features = train_model(df)
    st.success("Model trained and ready.")

    # DATA PREVIEW
    st.subheader("Historical Data Preview")
    st.dataframe(df.head(25))

    # FETCH LIVE ODDS
    st.subheader("Live Odds")
    df_live = fetch_live_odds(api_key) if api_key else pd.DataFrame()
    if not df_live.empty:
        st.dataframe(df_live)
        # Try to enrich live odds with stats if available
        if stats_file and name_col:
            df_live = merge_fighter_stats(df_live, df_stats, name_col, 'RedFighter', 'BlueFighter')

        # Compute value bets
        bets_df = get_value_bets(df_live, model, features, edge_thresh)
        st.subheader(f"Value Bets (Edge â‰¥ {edge_thresh} pp)")
        if not bets_df.empty:
            st.dataframe(bets_df)
        else:
            st.info("No value bets found for these fights at current threshold.")
    else:
        st.info("No live odds available or API key not provided.")

if __name__ == "__main__":
    main()
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

st.title("UFC Value Betting & Bankroll Simulator")

@st.cache_data
def load_data(uploaded_file):
    return pd.read_csv(uploaded_file)

@st.cache_resource
def load_model(model_path):
    return joblib.load(model_path)

uploaded_file = st.file_uploader("Upload your merged historical dataset CSV", type="csv")
model_file = st.file_uploader("Upload your trained UFC model (.pkl)", type="pkl")

if uploaded_file and model_file:
    df = load_data(uploaded_file)
    model = load_model(model_file)

    expected_features = [
        "RedOdds", "BlueOdds", "RedExpectedValue", "BlueExpectedValue",
        "WinStreakDif", "LossDif", "KODif", "SubDif",
        "HeightDif", "ReachDif", "AgeDif"
    ]

    # --- Build all required features ---
    df['RedOdds'] = df['R_odds']
    df['BlueOdds'] = df['B_odds']
    df['RedExpectedValue'] = 0
    df['BlueExpectedValue'] = 0
    df['WinStreakDif'] = 0
    df['LossDif'] = df['losses_total_diff'] if 'losses_total_diff' in df.columns else 0
    df['KODif'] = df['kd_diff'] if 'kd_diff' in df.columns else 0
    df['SubDif'] = df['sub_att_diff'] if 'sub_att_diff' in df.columns else 0
    df['HeightDif'] = df['height_diff'] if 'height_diff' in df.columns else 0
    df['ReachDif'] = df['reach_diff'] if 'reach_diff' in df.columns else 0
    df['AgeDif'] = df['age_diff'] if 'age_diff' in df.columns else 0

    # --- Final prediction dataframe ---
    X = df[expected_features].fillna(0)
    # --- Model prediction ---
    probs = model.predict_proba(X)[:, 1]
    df['RedProb'] = probs
    df['BlueProb'] = 1 - probs

    st.write("First 5 rows of prediction probabilities:", df[['RedProb', 'BlueProb']].head())

    # --- Compute implied probabilities from odds ---
    def moneyline_to_prob(odds):
        """Convert American odds to implied probability."""
        odds = pd.to_numeric(odds, errors='coerce')
        prob = np.where(
            odds < 0, (-odds) / ((-odds) + 100),
            100 / (odds + 100)
        )
        return prob

    df['RedImpliedProb'] = moneyline_to_prob(df['R_odds'])
    df['BlueImpliedProb'] = moneyline_to_prob(df['B_odds'])

    # --- Value bet filtering ---
    value_threshold = 0.05  # 5%
    # Value bet if model probability > implied probability + 0.05
    df['RedValueBet'] = (df['RedProb'] - df['RedImpliedProb']) > value_threshold
    df['BlueValueBet'] = (df['BlueProb'] - df['BlueImpliedProb']) > value_threshold

    value_bets = df[(df['RedValueBet']) | (df['BlueValueBet'])].copy()
    st.write(f"Value bets found: {len(value_bets)}")
    st.dataframe(value_bets[['r_fighter','b_fighter','RedProb','BlueProb','R_odds','B_odds','RedValueBet','BlueValueBet','winner']].head(20))

    # --- Bankroll Simulation ---
    initial_bankroll = st.number_input("Initial bankroll ($)", value=10000)
    bet_size = st.number_input("Flat bet per value bet ($)", value=100)

    bankroll = initial_bankroll
    bet_log = []
    wins, losses = 0, 0

    for i, row in value_bets.iterrows():
        # Which side to bet?
        if row['RedValueBet']:
            side = 'Red'
            odds = row['R_odds']
            model_prob = row['RedProb']
            implied_prob = row['RedImpliedProb']
            won = row['winner'] == 'Red'
        else:
            side = 'Blue'
            odds = row['B_odds']
            model_prob = row['BlueProb']
            implied_prob = row['BlueImpliedProb']
            won = row['winner'] == 'Blue'

        # Payout calculation
        if odds > 0:
            payout = bet_size * odds / 100
        else:
            payout = bet_size * 100 / abs(odds)

        if won:
            bankroll += payout
            wins += 1
            bet_result = payout
        else:
            bankroll -= bet_size
            losses += 1
            bet_result = -bet_size

        bet_log.append({
            'fight': f"{row['r_fighter']} vs {row['b_fighter']}",
            'side': side,
            'model_prob': model_prob,
            'implied_prob': implied_prob,
            'odds': odds,
            'won': won,
            'result': bet_result,
            'bankroll': bankroll
        })

    # --- Summary ---
    total_bets = len(bet_log)
    roi = (bankroll - initial_bankroll) / (total_bets * bet_size) * 100 if total_bets > 0 else 0
    st.subheader("Simulation Stats")
    st.json({
        "Total Bets": total_bets,
        "Wins": wins,
        "Losses": losses,
        "Win %": round(100 * wins / total_bets, 2) if total_bets > 0 else 0,
        "ROI %": round(roi, 2),
        "Final Bankroll": round(bankroll, 2)
    })
    st.dataframe(pd.DataFrame(bet_log).head(50))

else:
    st.info("Upload both your merged historical dataset CSV and trained model (.pkl) to start.")
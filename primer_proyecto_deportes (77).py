# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# --- Load the trained model
@st.cache_resource
def load_model():
    return joblib.load("ufc_model (1).pkl")  # Change filename if needed

model = load_model()

# --- Model feature list (must match what you used for training)
model_features = [
    'r_kd', 'r_sig_str', 'r_sig_str_att', 'r_sig_str_acc', 'r_str', 'r_str_att', 'r_str_acc', 'r_td', 'r_td_att', 'r_td_acc',
    'r_sub_att', 'r_rev', 'r_ctrl_sec', 'r_wins_total', 'r_losses_total', 'r_age', 'r_height', 'r_weight', 'r_reach',
    'r_SLpM_total', 'r_SApM_total', 'r_sig_str_acc_total', 'r_td_acc_total', 'r_str_def_total', 'r_td_def_total',
    'r_sub_avg', 'r_td_avg', 'b_kd', 'b_sig_str', 'b_sig_str_att', 'b_sig_str_acc', 'b_str', 'b_str_att', 'b_str_acc',
    'b_td', 'b_td_att', 'b_td_acc', 'b_sub_att', 'b_rev', 'b_ctrl_sec', 'b_wins_total', 'b_losses_total', 'b_age',
    'b_height', 'b_weight', 'b_reach', 'b_SLpM_total', 'b_SApM_total', 'b_sig_str_acc_total', 'b_td_acc_total',
    'b_str_def_total', 'b_td_def_total', 'b_sub_avg', 'b_td_avg', 'kd_diff', 'sig_str_diff', 'sig_str_att_diff',
    'sig_str_acc_diff', 'str_diff', 'str_att_diff', 'str_acc_diff', 'td_diff', 'td_att_diff', 'td_acc_diff',
    'sub_att_diff', 'rev_diff', 'ctrl_sec_diff', 'wins_total_diff', 'losses_total_diff', 'age_diff', 'height_diff',
    'weight_diff', 'reach_diff', 'SLpM_total_diff', 'SApM_total_diff', 'sig_str_acc_total_diff', 'td_acc_total_diff',
    'str_def_total_diff', 'td_def_total_diff', 'sub_avg_diff', 'td_avg_diff', 'R_odds', 'B_odds'
]

st.title("ðŸ¥Š UFC Value Bet Simulator (with Real Model)")

st.write(
    """
    **Upload your historical UFC fight CSV with full stats and odds.**
    - The model will predict actual win probabilities for each fight using all available stats.
    - Simulates value betting with these probabilities.
    """
)

uploaded_file = st.file_uploader("Upload your merged historical dataset (CSV)", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    # Rename columns for consistency
    column_map = {
        'r_fighter': 'RedFighter',
        'b_fighter': 'BlueFighter',
        'R_odds': 'RedOdds',
        'B_odds': 'BlueOdds',
        'winner': 'Winner'
    }
    df = df.rename(columns=column_map)

    # Ensure all required features exist (add missing as zero)
    for col in model_features:
        if col not in df.columns:
            df[col] = 0.0

    # Predict probabilities using the real model and all features!
    X = df[model_features]
    df['RedProb'] = model.predict_proba(X)[:, 1]
    df['BlueProb'] = 1 - df['RedProb']

    # Calculate edges
    df['RedEdge'] = df['RedProb'] - (1 / np.maximum(df['RedOdds'], 1.01))
    df['BlueEdge'] = df['BlueProb'] - (1 / np.maximum(df['BlueOdds'], 1.01))

    sim_edge_thresh = st.slider("Value Bet Minimum Edge (%)", 1, 25, 10) / 100

    sim_bets = []
    for idx, row in df.iterrows():
        if row['RedEdge'] > sim_edge_thresh:
            odds = row['RedOdds']
            edge = row['RedEdge']
            model_prob = row['RedProb']
            won = (str(row['Winner']).lower() == "red") or (row['Winner'] == row['RedFighter'])
            sim_bets.append({
                'Fight': f"{row['RedFighter']} vs {row['BlueFighter']}",
                'BetOn': row['RedFighter'],
                'Odds': odds,
                'Edge': edge,
                'ModelProb': model_prob,
                'Result': 'Win' if won else 'Loss',
                'Profit': odds-1 if won else -1
            })
        elif row['BlueEdge'] > sim_edge_thresh:
            odds = row['BlueOdds']
            edge = row['BlueEdge']
            model_prob = row['BlueProb']
            won = (str(row['Winner']).lower() == "blue") or (row['Winner'] == row['BlueFighter'])
            sim_bets.append({
                'Fight': f"{row['RedFighter']} vs {row['BlueFighter']}",
                'BetOn': row['BlueFighter'],
                'Odds': odds,
                'Edge': edge,
                'ModelProb': model_prob,
                'Result': 'Win' if won else 'Loss',
                'Profit': odds-1 if won else -1
            })

    sim_bets_df = pd.DataFrame(sim_bets)
    if sim_bets_df.empty:
        st.info("No value bets found in the historical data for the current threshold.")
    else:
        st.subheader("Value Bet Simulation Results")
        st.dataframe(sim_bets_df)

        total_bets = len(sim_bets_df)
        total_profit = sim_bets_df['Profit'].sum()
        roi = total_profit / total_bets if total_bets else 0

        st.success(f"Total Bets: **{total_bets}**")
        st.success(f"Total Profit: **{total_profit:.2f} units**")
        st.success(f"ROI per bet: **{roi:.3%}**")

        st.line_chart(sim_bets_df['Profit'].cumsum(), height=200, use_container_width=True)
else:
    st.info("Please upload your merged historical dataset (CSV) to simulate value bets.")
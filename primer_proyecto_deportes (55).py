# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# -- App Title --
st.title("UFC Value Betting Bankroll Simulator - DEBUG MODE")

# -- File Uploads --
st.header("Step 1: Upload your model and dataset")
model_file = st.file_uploader("Upload trained model (.pkl)", type=["pkl"])
data_file = st.file_uploader("Upload dataset (.csv)", type=["csv"])

if not (model_file and data_file):
    st.warning("Upload both model and data to continue.")
    st.stop()

# -- Load Model --
@st.cache_resource
def load_model(f):
    return joblib.load(f)

try:
    model = load_model(model_file)
except Exception as e:
    st.error(f"Could not load model: {e}")
    st.stop()

# -- Load Data --
@st.cache_data
def load_data(f):
    return pd.read_csv(f)

df = load_data(data_file)

# -- DEBUG: Print Column Names and Head --
st.subheader("CSV Columns")
st.write(list(df.columns))
st.write(df.head(10))

# --- Check/Debug Odds ---
# Odds must be > 1 (decimal odds)
st.subheader("Quick odds sanity check")
if 'R_odds' in df.columns and 'B_odds' in df.columns:
    st.write(df[['R_odds', 'B_odds']].describe())
    st.write(df[['R_odds', 'B_odds']].head(10))
else:
    st.error("Odds columns ('R_odds', 'B_odds') missing from dataset!")
    st.stop()

# -- Feature Names from Model (safer) --
if hasattr(model, 'feature_names_in_'):
    feature_cols = list(model.feature_names_in_)
else:
    # Fallback: typical names, adjust as needed
    feature_cols = [
        'RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
        'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif',
        'ReachDif', 'AgeDif'
    ]

# -- Check for missing features --
missing = [col for col in feature_cols if col not in df.columns]
if missing:
    st.error(f"Missing columns in data: {missing}")
    st.stop()

# -- Fill NAs (for safety) --
df[feature_cols] = df[feature_cols].fillna(0)

# --- Predict Win Probabilities ---
probs = model.predict_proba(df[feature_cols])[:, 1]  # P(Red wins)
df['RedProb'] = probs
df['BlueProb'] = 1 - probs

# --- Calculate Edges (value bet logic) ---
df['RedEdge'] = df['RedProb'] * df['R_odds'] - 1
df['BlueEdge'] = df['BlueProb'] * df['B_odds'] - 1

value_bets = df[(df['RedEdge'] > 0.05) | (df['BlueEdge'] > 0.05)].copy()
st.subheader("First 10 Value Bets")
st.write(value_bets[['r_fighter', 'b_fighter', 'R_odds', 'B_odds', 'RedProb', 'BlueProb', 'RedEdge', 'BlueEdge']].head(10))
st.write(f"Total Value Bets: {len(value_bets)}")

# --- Simulation Function (with debug info) ---
def simulate_bankroll(df, stake=100, method='kelly', initial_bankroll=1000):
    bankroll = initial_bankroll
    results = []
    for i, row in df.iterrows():
        bet_on = None
        prob = None
        odds = None
        win = None
        bet = 0
        if row['RedEdge'] > row['BlueEdge']:
            bet_on = 'Red'
            prob = row['RedProb']
            odds = row['R_odds']
            if odds <= 1: continue
            if method == 'kelly':
                kelly = ((prob * (odds - 1)) - (1 - prob)) / (odds - 1)
                kelly = max(0, min(kelly, 1))
                bet = bankroll * kelly
            else:
                bet = stake
            bet = min(bet, bankroll)
            win = row.get('winner', '') == 'Red'
        elif row['BlueEdge'] > row['RedEdge']:
            bet_on = 'Blue'
            prob = row['BlueProb']
            odds = row['B_odds']
            if odds <= 1: continue
            if method == 'kelly':
                kelly = ((prob * (odds - 1)) - (1 - prob)) / (odds - 1)
                kelly = max(0, min(kelly, 1))
                bet = bankroll * kelly
            else:
                bet = stake
            bet = min(bet, bankroll)
            win = row.get('winner', '') == 'Blue'
        else:
            continue  # no edge

        # --- Profit/Loss Logic ---
        pre_bankroll = bankroll
        if win:
            profit = bet * (odds - 1)
            bankroll += profit
        else:
            profit = -bet
            bankroll += profit
        results.append({
            'fight': f"{row['r_fighter']} vs {row['b_fighter']}",
            'bet_on': bet_on, 'odds': odds, 'prob': prob, 'bet': bet, 'win': win,
            'profit': profit, 'pre_bankroll': pre_bankroll, 'post_bankroll': bankroll
        })
        if bankroll <= 0:
            bankroll = 0
            break
    return pd.DataFrame(results)

st.header("Step 2: Run Simulation")
stake = st.number_input("Flat stake per bet (if not using Kelly)", min_value=1, max_value=1000, value=100)
initial_bankroll = st.number_input("Initial bankroll", min_value=100, max_value=100000, value=1000)
method = st.selectbox("Bet sizing method", ['flat', 'kelly'])

if st.button("Run Simulation"):
    sim_df = simulate_bankroll(value_bets, stake=stake, method=method, initial_bankroll=initial_bankroll)
    st.subheader("First 10 simulation steps")
    st.write(sim_df.head(10))

    if not sim_df.empty:
        wins = sim_df['win'].sum()
        losses = (~sim_df['win']).sum()
        roi = 100 * (sim_df['post_bankroll'].iloc[-1] - initial_bankroll) / (stake * len(sim_df)) if method == 'flat' else 100 * (sim_df['post_bankroll'].iloc[-1] - initial_bankroll) / initial_bankroll
        st.json({
            "Total Bets": int(len(sim_df)),
            "Wins": int(wins),
            "Losses": int(losses),
            "Win %": round(100 * wins / len(sim_df), 2) if len(sim_df) else 0,
            "ROI %": round(roi, 2),
            "Final Bankroll": float(sim_df['post_bankroll'].iloc[-1])
        })
        st.line_chart(sim_df['post_bankroll'].values)
    else:
        st.warning("No value bets or simulation steps available.")

# --- Extra: Show all value bets (optional) ---
with st.expander("Show all value bets used in simulation"):
    st.dataframe(value_bets)
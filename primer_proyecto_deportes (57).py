# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

st.set_page_config(page_title="UFC Value Betting & Bankroll Simulator", layout="wide")
st.title("UFC Value Betting & Bankroll Simulator")

@st.cache_data
def load_data(uploaded_file):
    return pd.read_csv(uploaded_file)

@st.cache_resource
def load_model(model_path):
    return joblib.load(model_path)

# ---- File Uploads ----
uploaded_file = st.file_uploader("Upload your merged historical dataset CSV", type="csv")
model_file = st.file_uploader("Upload your trained UFC model (.pkl)", type="pkl")

if uploaded_file and model_file:
    df = load_data(uploaded_file)
    st.subheader("CSV Columns")
    st.write(df.columns.tolist())
    st.dataframe(df.head(10))

    # --- Dynamically Map Required Columns ---
    # These are the columns your model expects, per previous discussion
    EXPECTED_COLS = {
        'RedOdds': 'R_odds',
        'BlueOdds': 'B_odds',
        'KODif': 'kd_diff',
        'SubDif': 'sub_att_diff',
        'HeightDif': 'height_diff',
        'ReachDif': 'reach_diff',
        'AgeDif': 'age_diff',
        'WinStreakDif': 'win_streak_diff',     # adapt if not present
        'LossDif': 'losses_total_diff'         # adapt if not present
    }
    # Dynamically check and replace missing columns with 0
    for key, col in EXPECTED_COLS.items():
        if col not in df.columns:
            df[key] = 0
        else:
            df[key] = df[col]
    # Model expects columns in this order:
    feature_cols = ['RedOdds', 'BlueOdds', 'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif']

    # ---- Model Prediction ----
    model = load_model(model_file)
    X = df[feature_cols]
    probs = model.predict_proba(X)[:, 1]  # Probability Red wins
    df['RedProb'] = probs
    df['BlueProb'] = 1 - probs

    # ---- Value Betting Calculation ----
    def implied_prob(odds):
        return np.where(odds < 0, -odds / (-odds + 100), 100 / (odds + 100))

    df['RedImplied'] = implied_prob(df['RedOdds'])
    df['BlueImplied'] = implied_prob(df['BlueOdds'])

    df['RedEV'] = (df['RedProb'] * np.where(df['RedOdds'] > 0, df['RedOdds']/100, 100/abs(df['RedOdds']))) - (1 - df['RedProb'])
    df['BlueEV'] = (df['BlueProb'] * np.where(df['BlueOdds'] > 0, df['BlueOdds']/100, 100/abs(df['BlueOdds']))) - (1 - df['BlueProb'])

    # Find value bets at 5% edge
    value_bets = []
    for idx, row in df.iterrows():
        if (row['RedProb'] - row['RedImplied']) > 0.05:
            value_bets.append({'idx': idx, 'corner': 'Red', 'prob': row['RedProb'], 'odds': row['RedOdds'], 'ev': row['RedEV']})
        if (row['BlueProb'] - row['BlueImplied']) > 0.05:
            value_bets.append({'idx': idx, 'corner': 'Blue', 'prob': row['BlueProb'], 'odds': row['BlueOdds'], 'ev': row['BlueEV']})
    value_bets_df = pd.DataFrame(value_bets)

    st.subheader("Value Bets (5%+ edge)")
    if not value_bets_df.empty:
        st.write(value_bets_df)
    else:
        st.info("No value bets found with current filter.")

    # ---- Bankroll Simulation ----
    st.subheader("Bankroll Simulation")
    starting_bankroll = st.number_input("Starting Bankroll", value=1000, min_value=10)
    unit = st.number_input("Flat Bet per Value Bet", value=10, min_value=1)
    bankroll = starting_bankroll
    wins, losses = 0, 0

    for _, vb in value_bets_df.iterrows():
        idx = int(vb['idx'])
        # Find result: 1 = win, 0 = lose
        if vb['corner'] == 'Red':
            result = 1 if df.loc[idx, 'winner'].lower() == 'red' else 0
            odds = vb['odds']
        else:
            result = 1 if df.loc[idx, 'winner'].lower() == 'blue' else 0
            odds = vb['odds']
        if result:
            if odds > 0:
                bankroll += unit * (odds / 100)
            else:
                bankroll += unit * (100 / abs(odds))
            wins += 1
        else:
            bankroll -= unit
            losses += 1

    total_bets = len(value_bets_df)
    roi = ((bankroll - starting_bankroll) / (starting_bankroll if starting_bankroll != 0 else 1)) * 100

    stats = {
        "Total Bets": total_bets,
        "Wins": wins,
        "Losses": losses,
        "Win %": round(wins / total_bets * 100, 2) if total_bets else 0,
        "ROI %": round(roi, 2),
        "Final Bankroll": round(bankroll, 2)
    }
    st.write("Simulation Stats", stats)

else:
    st.info("Upload both your merged historical dataset CSV and trained model (.pkl) to start.")
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Paths for uploaded model and dataset
MODEL_PATH = "/mnt/data/ufc_model.pkl"

st.title("UFC Value Betting & Bankroll Simulator")

@st.cache_data
def load_data(uploaded_file):
    df = pd.read_csv(uploaded_file)
    return df

@st.cache_resource
def load_model(model_path):
    return joblib.load(model_path)

# Map the expected model features to your columns
COLUMN_MAP = {
    'RedOdds': 'R_odds',
    'BlueOdds': 'B_odds',
    'WinStreakDif': 'kd_diff',  # Example, change to the real win streak diff if exists!
    'LossDif': 'losses_total_diff' if 'losses_total_diff' in list else 'losses_diff',  # adapt as needed
    'KODif': 'kd_diff',
    'SubDif': 'sub_att_diff',
    'HeightDif': 'height_diff',
    'ReachDif': 'reach_diff',
    'AgeDif': 'age_diff'
}

# If you have 'RedExpectedValue' and 'BlueExpectedValue', calculate them later.

uploaded_file = st.file_uploader("Upload your merged historical dataset CSV", type="csv")
model_file = st.file_uploader("Upload your trained UFC model (.pkl)", type="pkl")

if uploaded_file and model_file:
    # Load model & data
    try:
        model = load_model(model_file)
    except Exception as e:
        st.error(f"Could not load model: {e}")
        st.stop()

    df = load_data(uploaded_file)
    st.subheader("CSV Columns")
    st.write(df.columns.tolist())
    st.dataframe(df.head(10))

    # --- Fix columns ---
    for model_col, real_col in COLUMN_MAP.items():
        if model_col not in df.columns:
            if real_col in df.columns:
                df[model_col] = df[real_col]
            else:
                df[model_col] = 0  # or np.nan, or try to compute

    # Compute Expected Value columns
    # For American odds, convert to decimal odds:
    def american_to_decimal(odds):
        if pd.isna(odds):
            return np.nan
        try:
            o = float(odds)
        except:
            return np.nan
        if o > 0:
            return 1 + o/100
        else:
            return 1 + 100/abs(o)

    df['RedDecimalOdds'] = df['RedOdds'].apply(american_to_decimal)
    df['BlueDecimalOdds'] = df['BlueOdds'].apply(american_to_decimal)

    # Predict win probabilities
    feature_cols = list(COLUMN_MAP.keys())
    X = df[feature_cols].fillna(0)
    try:
        win_probs = model.predict_proba(X)[:, 1]  # Prob Red wins
    except Exception as e:
        st.error(f"Prediction failed: {e}")
        st.stop()

    df['RedProb'] = win_probs
    df['BlueProb'] = 1 - win_probs

    # Expected Value Calculation
    df['RedExpectedValue'] = df['RedProb'] * (df['RedDecimalOdds'] - 1) - (1 - df['RedProb'])
    df['BlueExpectedValue'] = df['BlueProb'] * (df['BlueDecimalOdds'] - 1) - (1 - df['BlueProb'])

    st.subheader("Quick odds sanity check")
    st.dataframe(df[['R_odds', 'B_odds']].head(10))
    st.write(df[['R_odds', 'B_odds']].describe())

    # --- Value Bets Filter (5%) ---
    value_threshold = 0.05
    value_bets = []
    for idx, row in df.iterrows():
        if row['RedExpectedValue'] > value_threshold:
            value_bets.append({'bet': 'Red', 'expected_value': row['RedExpectedValue'], 'prob': row['RedProb'], 'odds': row['RedOdds'], 'winner': row['winner'], 'idx': idx})
        if row['BlueExpectedValue'] > value_threshold:
            value_bets.append({'bet': 'Blue', 'expected_value': row['BlueExpectedValue'], 'prob': row['BlueProb'], 'odds': row['BlueOdds'], 'winner': row['winner'], 'idx': idx})

    st.header("Value Bets (EV > 5%)")
    st.write(f"Total Value Bets: {len(value_bets)}")
    st.dataframe(pd.DataFrame(value_bets).head(25))

    # --- Bankroll Simulation ---
    starting_bankroll = st.number_input("Starting bankroll ($)", min_value=10, max_value=100000, value=1000)
    flat_bet = st.number_input("Flat bet per value bet ($)", min_value=1, max_value=10000, value=10)

    results = []
    bankroll = starting_bankroll
    for bet in value_bets:
        # Only simulate if we have a known result
        idx = bet['idx']
        if bet['bet'] == 'Red':
            won = (df.iloc[idx]['winner'] == 'Red')
            odds = df.iloc[idx]['RedDecimalOdds']
        else:
            won = (df.iloc[idx]['winner'] == 'Blue')
            odds = df.iloc[idx]['BlueDecimalOdds']
        if won:
            profit = flat_bet * (odds - 1)
            bankroll += profit
            results.append(1)
        else:
            bankroll -= flat_bet
            results.append(0)
    total_bets = len(results)
    wins = sum(results)
    losses = total_bets - wins
    roi = ((bankroll - starting_bankroll) / (flat_bet * total_bets)) * 100 if total_bets > 0 else 0

    st.subheader("Simulation Stats")
    st.json({
        "Total Bets": total_bets,
        "Wins": wins,
        "Losses": losses,
        "Win %": round(100 * wins / total_bets, 2) if total_bets > 0 else None,
        "ROI %": round(roi, 2),
        "Final Bankroll": round(bankroll, 2),
    })
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import joblib

st.title('UFC Value Bet Dashboard')

# -- LOAD MODEL AND DATA --
model = joblib.load('/mnt/data/ufc_model.pkl')
df = pd.read_csv('/mnt/data/your_merged_historical_dataset.csv')

# -- FEATURE PREPARATION --
df['RedOdds'] = df['R_odds']
df['BlueOdds'] = df['B_odds']
df['WinStreakDif'] = 0  # Placeholder: No win streak data available in your dataset
df['LossDif'] = df['losses_total_diff']
df['KODif'] = df['kd_diff']
df['SubDif'] = df['sub_att_diff']
df['HeightDif'] = df['height_diff']
df['ReachDif'] = df['reach_diff']
df['AgeDif'] = df['age_diff']

# -- SELECT AND FILL FEATURES --
feature_cols = [
    'RedOdds', 'BlueOdds', 'WinStreakDif', 'LossDif',
    'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif'
]
X = df[feature_cols].fillna(0)

# -- PREDICT PROBABILITIES --
probs = model.predict_proba(X)[:, 1]
df['RedProb'] = probs
df['BlueProb'] = 1 - probs

# -- CALCULATE EXPECTED VALUES --
df['RedExpectedValue'] = (df['RedProb'] * df['RedOdds']) - (1 - df['RedProb'])
df['BlueExpectedValue'] = (df['BlueProb'] * df['BlueOdds']) - (1 - df['BlueProb'])

# -- FINAL FEATURE SET (as used by the model) --
feature_cols_final = [
    'RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
    'WinStreakDif', 'LossDif', 'KODif', 'SubDif',
    'HeightDif', 'ReachDif', 'AgeDif'
]
df[feature_cols_final] = df[feature_cols_final].fillna(0)

# -- VALUE BET FILTER --
value_bets = df[(df['RedExpectedValue'] > 0.05) | (df['BlueExpectedValue'] > 0.05)]

st.subheader("Value Bets (Expected Value > 5%)")
st.dataframe(
    value_bets[[
        'r_fighter', 'b_fighter', 'R_odds', 'B_odds',
        'RedProb', 'BlueProb', 'RedExpectedValue', 'BlueExpectedValue'
    ]]
)

# -- OPTIONAL: BANKROLL SIMULATION (BASIC) --
st.subheader("Bankroll Simulation (Flat $100 per Value Bet)")
initial_bankroll = 1000
bet_size = 100

sim_bankroll = initial_bankroll
results = []

for _, row in value_bets.iterrows():
    if row['RedExpectedValue'] > 0.05:
        win = (row['winner'] == 'Red')
        payout = bet_size * (row['R_odds'] - 1) if win else -bet_size
        sim_bankroll += payout
        results.append({
            'Fighter': row['r_fighter'],
            'Side': 'Red',
            'Odds': row['R_odds'],
            'Bet': bet_size,
            'Win': win,
            'Payout': payout,
            'Bankroll': sim_bankroll
        })
    if row['BlueExpectedValue'] > 0.05:
        win = (row['winner'] == 'Blue')
        payout = bet_size * (row['B_odds'] - 1) if win else -bet_size
        sim_bankroll += payout
        results.append({
            'Fighter': row['b_fighter'],
            'Side': 'Blue',
            'Odds': row['B_odds'],
            'Bet': bet_size,
            'Win': win,
            'Payout': payout,
            'Bankroll': sim_bankroll
        })

results_df = pd.DataFrame(results)
st.dataframe(results_df)

st.write(f"**Final Bankroll:** ${sim_bankroll:.2f}")
st.write(f"**Total Bets:** {len(results_df)}")
st.write(f"**Wins:** {results_df['Win'].sum()}")
st.write(f"**Hit Rate:** {results_df['Win'].mean()*100:.2f}%")

# -- SHOW RAW DATA IF DESIRED --
with st.expander("See all columns in your data"):
    st.write(df.head())
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import pandas as pd
import streamlit as st
from datetime import datetime

# Cargar el archivo de value bets
df = pd.read_csv("value_bets_detectadas.csv")

# --- PREPROCESAMIENTO ---
# Convierte 'start_time' a fecha, si existe
if 'start_time' in df.columns:
    df['start_time'] = pd.to_datetime(df['start_time'], errors='coerce')
    today = pd.to_datetime(datetime.now().date())
    # Filtra solo peleas futuras (hoy o después)
    df_future = df[df['start_time'] >= today].copy()
else:
    df_future = df.copy()  # Si no hay fecha, muestra todo

# Por defecto, apuesta 1 unidad por apuesta
df_future['bet_amount'] = 1

# --- FUNCIONES AUXILIARES ---
# Convierte odds americanas a decimales (si es necesario)
def american_to_decimal(odds):
    try:
        odds = float(odds)
        if odds > 0:
            return round(1 + odds/100, 3)
        else:
            return round(1 + 100/abs(odds), 3)
    except:
        return None

# Si tus odds ya están en decimal, omite esto. Si no, agrega columna decimal:
if 'decimal_odds' not in df_future.columns:
    df_future['decimal_odds'] = df_future['odds'].apply(american_to_decimal)

# Resultado ficticio para peleas futuras (aún no han pasado)
df_future['outcome'] = 'Pending'

# --- STREAMLIT DASHBOARD ---
st.title("UFC Value Bets Dashboard")
st.write("Mostrando solo peleas FUTURAS con value bets detectadas.")

# Selección de evento y ordenar
eventos = ['Todos'] + sorted(df_future['event'].dropna().unique())
selected_event = st.selectbox("Selecciona un evento", eventos)
if selected_event != 'Todos':
    df_show = df_future[df_future['event'] == selected_event]
else:
    df_show = df_future.copy()

# Tabla de apuestas de valor
st.subheader("Apuestas de Valor Futuras")
st.dataframe(df_show[['event', 'bet_on', 'odds', 'decimal_odds', 'model_prob', 'edge', 'start_time']])

# --- Cálculo y gráfico del ROI ---
st.subheader("ROI Simulado (pelea pendiente)")
st.info("El ROI aquí es solo un simulador, ya que las peleas aún no han pasado.")

# Calcula "ROI esperado" basado en la probabilidad del modelo:
# ROI esperado = (Probabilidad_modelo * (decimal_odds - 1)) - (1 - Probabilidad_modelo)
df_show['roi_esperado'] = df_show.apply(
    lambda row: (row['model_prob'] * (row['decimal_odds'] - 1)) - (1 - row['model_prob'])
    if row['decimal_odds'] else None, axis=1
)

# Grafica ROI esperado por evento
roi_event = df_show.groupby('event')['roi_esperado'].mean().dropna()
st.bar_chart(roi_event)

# Tabla de apuestas con mayor ROI esperado
st.subheader("Top Value Bets (Mayor ROI Esperado)")
st.dataframe(df_show.sort_values("roi_esperado", ascending=False).head(10))

st.caption("Por Digital Reset | Powered by Streamlit")
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
from sklearn.linear_model import LogisticRegression
from sklearn.calibration import CalibratedClassifierCV
from sklearn.preprocessing import LabelEncoder
from datetime import datetime, timedelta

# Page config must be first Streamlit call
st.set_page_config(page_title="UFC Value Bet Dashboard", layout="wide")

# Helper functions
def load_history(path: str = 'ufc-master.csv') -> pd.DataFrame:
    return pd.read_csv(path)

@st.cache_resource
def train_model():
     df = load_history()
     features = [
         'RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
         'WinStreakDif', 'LossDif', 'KODif', 'SubDif',
         'HeightDif', 'ReachDif', 'AgeDif'
     ]
    features = [
        'RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
        'WinStreakDif', 'LossDif', 'KODif', 'SubDif',
        'HeightDif', 'ReachDif', 'AgeDif'
    ]
    df_train = df[features + ['Winner']].dropna()
    le = LabelEncoder()
    df_train['WinnerEnc'] = le.fit_transform(df_train['Winner'])
    X = df_train[features]
    y = df_train['WinnerEnc']
    model = LogisticRegression(C=1.23, max_iter=1000, solver='lbfgs', random_state=42)
    calib = CalibratedClassifierCV(model, method='isotonic', cv=5)
    calib.fit(X, y)
    return calib, features

@st.cache_data
def fetch_live_odds(api_key: str) -> list:
    url = 'https://api.the-odds-api.com/v4/sports/mma_mixed_martial_arts/odds'
    params = {'apiKey': api_key, 'regions': 'us', 'markets': 'h2h', 'oddsFormat': 'american'}
    r = requests.get(url, params=params)
    r.raise_for_status()
    return r.json()

# Convert American odds to implied probability
def implied_prob(o: float) -> float:
    return 100.0/(o+100.0) if o > 0 else abs(o)/(abs(o)+100.0)

# Main app
def main():
    st.sidebar.header("Settings")
    api_key = st.sidebar.text_input("Odds API Key", type="password")
    threshold = st.sidebar.slider("Edge Threshold (pp)", 0, 100, 15)
    days_ahead = st.sidebar.slider("Show events in next N days", 1, 30, 7)
    filter_str = st.sidebar.text_input("Filter matchups (comma-separated)")
    # Build filters list only if input provided
    if filter_str and filter_str.strip():
        filters = [term.strip().lower() for term in filter_str.split(",") if term.strip()]
    else:
        filters = []

    st.title("UFC Value Bet Dashboard")
    if not api_key:
        st.warning("Enter your Odds API key in the sidebar.")
        return

    # Load history and train model
    df_hist = load_history()
    model, features = train_model()

    st.subheader("Historical Data Preview")
    st.dataframe(df_hist.head(5))

    # Fetch and display live odds
    events = fetch_live_odds(api_key)
    now = datetime.utcnow()
    cutoff = now + timedelta(days=days_ahead)
    odds_rows = []
    for ev in events:
        for bm in ev.get('bookmakers', []):
            if bm.get('markets'):
                mkt = bm['markets'][0]
                if len(mkt.get('outcomes', [])) == 2:
                    try:
                        dt = datetime.fromisoformat(ev['commence_time'].replace('Z',''))
                    except:
                        continue
                    if not(now <= dt <= cutoff):
                        continue
                    f1, f2 = [o['name'] for o in mkt['outcomes']]
                    event_name = f"{f1} vs {f2}"
                    if filters and not any(f in event_name.lower() for f in filters):
                        continue
                    odds_rows.append({
                        'Event': event_name,
                        'Time (UTC)': ev['commence_time'],
                        f1: mkt['outcomes'][0]['price'],
                        f2: mkt['outcomes'][1]['price']
                    })
    df_odds = pd.DataFrame(odds_rows)
    if df_odds.empty:
        st.info("No upcoming fights match your criteria.")
        return
    st.subheader("Live Odds")
    st.dataframe(df_odds)

    # Compute value bets
    st.subheader(f"Value Bets (Edge â‰¥ {threshold} pp)")
    value_bets = []
    for _, r in df_odds.iterrows():
        fighters = [c for c in r.index if c not in ['Event','Time (UTC)']]
        f1, f2 = fighters
        o1, o2 = r[f1], r[f2]
        # match historical row
                mask = (
            (df_hist['RedFighter'] == f1) & (df_hist['BlueFighter'] == f2)
            ) | (
            (df_hist['RedFighter'] == f2) & (df_hist['BlueFighter'] == f1)
        )
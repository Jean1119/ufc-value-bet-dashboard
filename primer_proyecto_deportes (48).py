# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# --- SETTINGS ---
MODEL_PATH = '/mnt/data/ufc_model.pkl'
DEFAULT_CSV = '/mnt/data/your_merged_historical_dataset.csv'
VALUE_EDGE = 0.05        # 5% edge

# --- LOAD MODEL ---
@st.cache_resource
def load_model(path):
    return joblib.load(path)

# --- LOAD DATA ---
def load_data(uploaded_file):
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_csv(DEFAULT_CSV)
    return df

# --- CALCULATE IMPLIED PROBABILITY ---
def implied_prob(odds):
    return 1 / odds if odds > 0 else 0

# --- MAIN APP ---
st.title('UFC Value Bet Finder & Bankroll Simulator')

# --- SIDEBAR ---
st.sidebar.header('Upload Data')
uploaded_file = st.sidebar.file_uploader("Choose a CSV file", type="csv")
initial_bankroll = st.sidebar.number_input('Initial bankroll ($)', min_value=10, value=1000)
bet_size = st.sidebar.number_input('Bet per value bet ($)', min_value=1, value=20)

# --- LOAD MODEL & DATA ---
try:
    model = load_model(MODEL_PATH)
    st.success("Model loaded!")
except Exception as e:
    st.error(f"Could not load model: {e}")
    st.stop()

df = load_data(uploaded_file)

# --- FEATURES FOR MODEL ---
FEATURE_COLS = [
    'RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
    'WinStreakDif', 'LossDif', 'KODif', 'SubDif',
    'HeightDif', 'ReachDif', 'AgeDif'
]

# --- ENSURE FEATURE COLS EXIST ---
missing = [c for c in FEATURE_COLS if c not in df.columns]
if missing:
    st.error(f"Missing columns in data: {missing}")
    st.stop()

# --- PREDICT PROBABILITIES ---
X = df[FEATURE_COLS].fillna(0)  # Fill NaN just in case
probs = model.predict_proba(X)[:, 1]  # Probability Red wins
df['model_red_prob'] = probs
df['model_blue_prob'] = 1 - probs

# --- IMPLIED PROBABILITIES ---
df['implied_red_prob'] = df['RedOdds'].apply(implied_prob)
df['implied_blue_prob'] = df['BlueOdds'].apply(implied_prob)

# --- VALUE BETS LOGIC ---
df['red_value'] = df['model_red_prob'] - df['implied_red_prob']
df['blue_value'] = df['model_blue_prob'] - df['implied_blue_prob']
value_bets = []

for i, row in df.iterrows():
    if row['red_value'] > VALUE_EDGE:
        value_bets.append({'fight': f"{row['r_fighter']} vs {row['b_fighter']}", 'side': 'Red', 'odds': row['RedOdds'],
                           'prob': row['model_red_prob'], 'edge': row['red_value'], 'winner': row['winner']})
    if row['blue_value'] > VALUE_EDGE:
        value_bets.append({'fight': f"{row['r_fighter']} vs {row['b_fighter']}", 'side': 'Blue', 'odds': row['BlueOdds'],
                           'prob': row['model_blue_prob'], 'edge': row['blue_value'], 'winner': row['winner']})

value_bets_df = pd.DataFrame(value_bets)

st.header('Value Bets (Model Edge â‰¥ 5%)')
if value_bets_df.empty:
    st.info("No value bets found for this dataset.")
else:
    st.dataframe(value_bets_df[['fight', 'side', 'odds', 'prob', 'edge']])

    # --- BANKROLL SIMULATION ---
    bankroll = initial_bankroll
    wins = 0
    losses = 0
    bet_history = []

    for _, row in value_bets_df.iterrows():
        if row['side'] == 'Red':
            won = (row['winner'].lower() == 'red')
            odds = row['odds']
        else:
            won = (row['winner'].lower() == 'blue')
            odds = row['odds']

        if won:
            profit = bet_size * (odds - 1)
            wins += 1
        else:
            profit = -bet_size
            losses += 1
        bankroll += profit
        bet_history.append(bankroll)

    st.header('Bankroll Simulation')
    st.markdown(f"**Initial Bankroll:** ${initial_bankroll}")
    st.markdown(f"**Final Bankroll:** ${bankroll:.2f}")
    st.markdown(f"**Total Value Bets:** {len(value_bets_df)}")
    st.markdown(f"**Wins:** {wins}")
    st.markdown(f"**Losses:** {losses}")

    st.line_chart(bet_history)

    st.header('Value Bet Summary')
    st.write(value_bets_df)

st.info("Upload new data or adjust edge/bankroll/bet size in the sidebar.")
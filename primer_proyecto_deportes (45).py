# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# --- File upload ---
st.title("UFC Value Bet Finder & Bankroll Simulator")

uploaded_model = st.file_uploader("Upload your trained UFC model (joblib)", type=["joblib"])
uploaded_csv = st.file_uploader("Upload your dataset (CSV)", type=["csv"])

if uploaded_model is not None and uploaded_csv is not None:
    try:
        # Load the model with joblib
        model = joblib.load(uploaded_model)
    except Exception as e:
        st.error(f"Could not load model: {e}")
        st.stop()

    try:
        df = pd.read_csv(uploaded_csv)
    except Exception as e:
        st.error(f"Could not read CSV: {e}")
        st.stop()

    # --- Ensure all feature columns are present and fill NaNs ---
    feature_cols = ['RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
                    'WinStreakDif', 'LossDif', 'KODif', 'SubDif',
                    'HeightDif', 'ReachDif', 'AgeDif']

    missing_cols = [col for col in feature_cols if col not in df.columns]
    if missing_cols:
        st.error(f"Missing columns in data: {missing_cols}")
        st.stop()

    X = df[feature_cols].copy()

    # Impute any missing values
    X = X.fillna(0)

    # --- Predict probabilities ---
    probs = model.predict_proba(X)[:, 1]  # Probability Red wins
    df['RedProb'] = probs
    df['BlueProb'] = 1 - probs

    # --- Value Bet Calculation (5% threshold) ---
    df['RedValue'] = df['RedProb'] * df['RedOdds']
    df['BlueValue'] = df['BlueProb'] * df['BlueOdds']
    df['RedValueBet'] = df['RedValue'] > 1.05
    df['BlueValueBet'] = df['BlueValue'] > 1.05

    # --- Display Value Bets ---
    st.subheader("Value Bets (Expected Value > 5%)")
    value_bets = df[(df['RedValueBet']) | (df['BlueValueBet'])]
    st.dataframe(value_bets[['r_fighter', 'b_fighter', 'RedOdds', 'BlueOdds', 'RedProb', 'BlueProb', 'RedValue', 'BlueValue', 'RedValueBet', 'BlueValueBet']])

    # --- Simulate Bankroll ---
    st.subheader("Bankroll Simulation")
    starting_bankroll = st.number_input("Starting Bankroll ($)", min_value=10, value=1000, step=10)
    bet_fraction = st.slider("Fraction of bankroll to bet per value bet", min_value=0.01, max_value=0.10, value=0.02, step=0.01)

    bankroll = starting_bankroll
    bankroll_history = [bankroll]
    for idx, row in value_bets.iterrows():
        # Bet on red if RedValueBet, otherwise on blue
        if row['RedValueBet']:
            bet = bet_fraction * bankroll
            if row['winner'] == 'Red':
                bankroll += bet * (row['RedOdds'] - 1)
            else:
                bankroll -= bet
        elif row['BlueValueBet']:
            bet = bet_fraction * bankroll
            if row['winner'] == 'Blue':
                bankroll += bet * (row['BlueOdds'] - 1)
            else:
                bankroll -= bet
        bankroll_history.append(bankroll)

    st.write(f"Final bankroll: ${bankroll:,.2f}")
    st.line_chart(bankroll_history)

    # --- Stats Summary ---
    st.subheader("Value Bet Statistics")
    total_bets = len(value_bets)
    wins = sum(
        ((value_bets['RedValueBet']) & (value_bets['winner'] == 'Red')) |
        ((value_bets['BlueValueBet']) & (value_bets['winner'] == 'Blue'))
    )
    winrate = wins / total_bets if total_bets > 0 else 0
    st.write(f"Total Value Bets: {total_bets}")
    st.write(f"Winrate: {winrate:.1%}")
    st.write(f"Average Red Expected Value: {value_bets['RedValue'].mean():.2f}")
    st.write(f"Average Blue Expected Value: {value_bets['BlueValue'].mean():.2f}")

else:
    st.info("Please upload both your trained UFC model (.joblib) and a dataset (.csv).")
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import joblib
import numpy as np

st.title("UFC Value Betting & Bankroll Simulator")

# File uploaders
csv_file = st.file_uploader("Upload your UFC fights CSV", type=['csv'])
model_file = st.file_uploader("Upload your trained model (.pkl)", type=['pkl'])

# Column mapping
COLUMN_MAP = {
    'R_odds': 'RedOdds',
    'B_odds': 'BlueOdds',
    'wins_total_diff': 'WinStreakDif',
    'losses_total_diff': 'LossDif',
    'kd_diff': 'KODif',
    'sub_att_diff': 'SubDif',
    'height_diff': 'HeightDif',
    'reach_diff': 'ReachDif',
    'age_diff': 'AgeDif'
    # Add more mappings if necessary
}

FEATURES = ['RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
            'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif']

def calculate_expected_value(prob, odds):
    return (odds - 1) * prob - (1 - prob)

if csv_file and model_file:
    df = pd.read_csv(csv_file)
    model = joblib.load(model_file)

    # Rename columns as needed
    df = df.rename(columns=COLUMN_MAP)

    # Fill missing model columns with zeros if any (better to clean before)
    for col in COLUMN_MAP.values():
        if col not in df.columns:
            df[col] = 0

    # Get feature columns for prediction (except EV columns)
    feature_cols_for_pred = [c for c in FEATURES if not c.endswith('ExpectedValue')]
    X = df[feature_cols_for_pred]

    # Predict win probabilities (assuming model.predict_proba returns Red win prob in [:,1])
    probs = model.predict_proba(X)[:, 1] # Probability Red wins
    df['RedProb'] = probs
    df['BlueProb'] = 1 - probs

    # Calculate Expected Value for both sides
    df['RedExpectedValue'] = calculate_expected_value(df['RedProb'], df['RedOdds'])
    df['BlueExpectedValue'] = calculate_expected_value(df['BlueProb'], df['BlueOdds'])

    # Show value bets with >=5% expected value
    value_bets = []
    for _, row in df.iterrows():
        if row['RedExpectedValue'] >= 0.05:
            value_bets.append({'Fighter': row.get('r_fighter', 'Red'), 'Side': 'Red', 'Odds': row['RedOdds'],
                               'ExpValue': row['RedExpectedValue'], 'Prob': row['RedProb']})
        if row['BlueExpectedValue'] >= 0.05:
            value_bets.append({'Fighter': row.get('b_fighter', 'Blue'), 'Side': 'Blue', 'Odds': row['BlueOdds'],
                               'ExpValue': row['BlueExpectedValue'], 'Prob': row['BlueProb']})
    value_bets_df = pd.DataFrame(value_bets)

    st.subheader("Value Bets (Edge â‰¥ 5%)")
    st.dataframe(value_bets_df)

    # Bankroll Simulation
    st.subheader("Bankroll Simulation")
    initial_bankroll = st.number_input("Initial Bankroll ($)", value=1000)
    bet_fraction = st.number_input("Stake per bet (%)", value=1.0, min_value=0.1, max_value=10.0) / 100

    # Simulate
    bankroll = initial_bankroll
    results = []
    for _, bet in value_bets_df.iterrows():
        stake = bankroll * bet_fraction
        won = np.random.rand() < bet['Prob']
        profit = stake * (bet['Odds'] - 1) if won else -stake
        bankroll += profit
        results.append({'Fighter': bet['Fighter'], 'Side': bet['Side'], 'Odds': bet['Odds'],
                        'Won': won, 'Stake': stake, 'Profit': profit, 'Bankroll': bankroll})

    sim_df = pd.DataFrame(results)
    st.line_chart(sim_df['Bankroll'])
    st.dataframe(sim_df)

    st.write(f"Final Bankroll: ${bankroll:,.2f}")

    # Stats summary
    st.subheader("Value Bet Statistics")
    st.write(f"Number of bets: {len(sim_df)}")
    st.write(f"Win Rate: {100*sim_df['Won'].mean():.1f}%")
    st.write(f"Average Profit per Bet: ${sim_df['Profit'].mean():.2f}")

else:
    st.info("Please upload both your CSV data and your trained model (.pkl) to proceed.")
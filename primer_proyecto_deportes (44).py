# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle

st.title("UFC Value Betting & Bankroll Simulator")

# --- Model Upload ---
st.header("1. Upload your model (.pkl)")
uploaded_model = st.file_uploader("Upload your trained UFC model (.pkl)", type=["pkl"])
if uploaded_model is not None:
    try:
        model = pickle.load(uploaded_model)
        st.success("Model loaded successfully!")
    except Exception as e:
        st.error(f"Could not load model: {e}")
        st.stop()
else:
    st.info("Please upload your model.")
    st.stop()

# --- Data Upload ---
st.header("2. Upload your dataset (.csv)")
uploaded_csv = st.file_uploader("Upload dataset CSV", type=["csv"])
if uploaded_csv is not None:
    df = pd.read_csv(uploaded_csv)
    st.success("Data loaded!")
else:
    st.info("Please upload your dataset.")
    st.stop()

# --- Match model's expected features ---
feature_cols = model.feature_names_in_ if hasattr(model, "feature_names_in_") else None
if feature_cols is None:
    st.error("Model does not have .feature_names_in_. You must use a sklearn model trained with feature names (>=1.0).")
    st.stop()

# Add missing columns as 0, drop extras
for col in feature_cols:
    if col not in df.columns:
        df[col] = 0
X = df[feature_cols].copy()

# Impute NaNs (mean for numeric columns)
for col in X.columns:
    if X[col].isnull().any():
        X[col] = X[col].fillna(X[col].mean())

# --- Predict Probabilities ---
probs = model.predict_proba(X)[:, 1]  # Probability 'Red' wins
df['RedProb'] = probs
df['BlueProb'] = 1 - probs

# --- Find Value Bets ---
st.header("3. Value Bet Finder")
# Ask user for the columns with odds
red_odds_col = st.selectbox("Column for Red Odds", [col for col in df.columns if "odd" in col.lower()])
blue_odds_col = st.selectbox("Column for Blue Odds", [col for col in df.columns if "odd" in col.lower()])

value_threshold = st.slider("Minimum Value Edge (%)", min_value=1, max_value=10, value=5)

# Calculate value for both sides
df['RedValue'] = df['RedProb'] * df[red_odds_col] - 1
df['BlueValue'] = df['BlueProb'] * df[blue_odds_col] - 1

# Filter value bets
value_bets = df[
    (df['RedValue'] > value_threshold / 100) |
    (df['BlueValue'] > value_threshold / 100)
].copy()

# Display value bets
st.subheader("Value Bets (Edge > {}%)".format(value_threshold))
if not value_bets.empty:
    st.write(value_bets[['r_fighter', 'b_fighter', red_odds_col, blue_odds_col, 'RedProb', 'BlueProb', 'RedValue', 'BlueValue']])
else:
    st.write("No value bets found for the selected threshold.")

# --- Bankroll Simulation ---
st.header("4. Bankroll Simulation")

start_bankroll = st.number_input("Starting Bankroll ($)", min_value=10, value=1000, step=10)
bet_pct = st.slider("Percent of Bankroll per Bet (%)", 0.5, 10.0, 2.0)

# Simulate using value bets
bankroll = start_bankroll
bankroll_history = [bankroll]
for idx, row in value_bets.iterrows():
    # Red value bet
    if row['RedValue'] > value_threshold / 100:
        bet = bankroll * bet_pct / 100
        if row['winner'].lower() == 'red':
            bankroll += bet * (row[red_odds_col] - 1)
        else:
            bankroll -= bet
        bankroll_history.append(bankroll)
    # Blue value bet
    if row['BlueValue'] > value_threshold / 100:
        bet = bankroll * bet_pct / 100
        if row['winner'].lower() == 'blue':
            bankroll += bet * (row[blue_odds_col] - 1)
        else:
            bankroll -= bet
        bankroll_history.append(bankroll)

st.subheader("Bankroll Over Time")
st.line_chart(bankroll_history)

# --- Summary Stats ---
st.header("5. Value Bet Summary Stats")
num_bets = len(value_bets)
win_bets = ((value_bets['RedValue'] > value_threshold / 100) & (value_bets['winner'].str.lower() == 'red')).sum() + \
           ((value_bets['BlueValue'] > value_threshold / 100) & (value_bets['winner'].str.lower() == 'blue')).sum()
lose_bets = num_bets * 2 - win_bets  # Each fight could have up to 2 bets

st.write(f"Number of Value Bets: {num_bets}")
st.write(f"Wins: {win_bets}")
st.write(f"Final Bankroll: ${bankroll:.2f}")
st.write(f"ROI: {((bankroll - start_bankroll) / start_bankroll) * 100:.2f}%")

st.success("Done! Tweak your odds and threshold for best results.")
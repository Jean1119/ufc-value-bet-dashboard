# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# ---- CONFIGURATION ----
FEATURE_COLS = [
    'kd_diff', 'sig_str_diff', 'sig_str_att_diff', 'sig_str_acc_diff', 'str_diff',
    'str_att_diff', 'str_acc_diff', 'td_diff', 'td_att_diff', 'td_acc_diff',
    'sub_att_diff', 'rev_diff', 'ctrl_sec_diff', 'wins_total_diff', 'losses_total_diff',
    'age_diff', 'height_diff', 'weight_diff', 'reach_diff', 'SLpM_total_diff',
    'SApM_total_diff', 'sig_str_acc_total_diff', 'td_acc_total_diff', 'str_def_total_diff',
    'td_def_total_diff', 'sub_avg_diff', 'td_avg_diff'
]

# ---- LOAD MODEL ----
@st.cache_resource
def load_model():
    return joblib.load('ufc_model.pkl')  # <- Make sure the model is in your working directory

model = load_model()

# ---- HELPER FUNCTIONS ----

def implied_prob(odds):
    return 1.0 / odds

def value_bet(prob, odds, threshold=0.05):
    imp = implied_prob(odds)
    edge = prob - imp
    return edge >= threshold

def kelly_stake(prob, odds, bankroll):
    b = odds - 1
    return ((prob * (b + 1) - 1) / b) * bankroll if b > 0 else 0

# ---- APP ----

st.title("UFC Value Bets & Bankroll Simulator")

st.sidebar.header("Settings")
margin = st.sidebar.slider("Value margin (%)", 0.01, 0.15, 0.05, step=0.01)
bet_type = st.sidebar.selectbox("Betting method", ["Flat (fixed)", "Kelly"])
initial_bankroll = st.sidebar.number_input("Initial bankroll ($)", 100, 100000, 1000, step=100)
flat_stake = st.sidebar.number_input("Flat stake ($)", 1, 10000, 50, step=1)

st.write("""
Upload a CSV file with your fights and odds (must include the feature columns, `R_odds`, `B_odds`).
""")

uploaded_file = st.file_uploader("Upload your fight CSV", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    X = df[FEATURE_COLS]
    probs_red = model.predict_proba(X)[:, 1]
    probs_blue = 1 - probs_red

    df['prob_red'] = probs_red
    df['prob_blue'] = probs_blue

    # --- VALUE BETS ---
    df['value_red'] = df.apply(lambda row: value_bet(row['prob_red'], row['R_odds'], margin), axis=1)
    df['value_blue'] = df.apply(lambda row: value_bet(row['prob_blue'], row['B_odds'], margin), axis=1)

    st.subheader(f"Value Bets found (margin: {margin*100:.0f}%)")
    bets = []
    for idx, row in df.iterrows():
        if row['value_red']:
            bets.append({'fight': f"{row['r_fighter']} vs {row['b_fighter']}",
                         'pick': 'Red', 'odds': row['R_odds'], 'prob': row['prob_red']})
        if row['value_blue']:
            bets.append({'fight': f"{row['r_fighter']} vs {row['b_fighter']}",
                         'pick': 'Blue', 'odds': row['B_odds'], 'prob': row['prob_blue']})

    bets_df = pd.DataFrame(bets)
    st.dataframe(bets_df)

    if len(bets_df) == 0:
        st.warning("No value bets found for the selected margin.")
    else:
        # ---- BANKROLL SIMULATION ----
        st.subheader("Bankroll simulation")

        historical = 'winner' in df.columns
        bankroll = initial_bankroll
        bankrolls = [bankroll]
        results = []

        for idx, bet in bets_df.iterrows():
            odds = bet['odds']
            prob = bet['prob']
            if bet_type == "Flat (fixed)":
                stake = flat_stake
            else:  # Kelly
                stake = max(0, kelly_stake(prob, odds, bankroll))
            stake = min(stake, bankroll)  # Can't bet more than you have

            if historical:
                fight_row = df[
                    (df['r_fighter'] == bet['fight'].split(' vs ')[0]) &
                    (df['b_fighter'] == bet['fight'].split(' vs ')[1])
                ].iloc[0]
                real_winner = fight_row['winner']
                won = (real_winner == 'Red' and bet['pick'] == 'Red') or \
                      (real_winner == 'Blue' and bet['pick'] == 'Blue')
            else:
                won = prob > implied_prob(odds)  # Simulate based on probability if no real result

            profit = stake * (odds - 1) if won else -stake
            bankroll += profit
            bankrolls.append(bankroll)
            results.append({'fight': bet['fight'], 'pick': bet['pick'], 'odds': odds,
                            'stake': stake, 'won': won, 'profit': profit, 'bankroll': bankroll})

        results_df = pd.DataFrame(results)
        st.dataframe(results_df)

        n_bets = len(results_df)
        n_win = results_df['won'].sum()
        n_loss = n_bets - n_win
        total_profit = results_df['profit'].sum()
        roi = 100 * (total_profit / (results_df['stake'].sum() if results_df['stake'].sum() > 0 else 1))

        st.write(f"**Total bets:** {n_bets}")
        st.write(f"**Wins:** {n_win}")
        st.write(f"**Losses:** {n_loss}")
        st.write(f"**Total profit:** ${total_profit:.2f}")
        st.write(f"**Yield (ROI):** {roi:.2f}%")
        st.line_chart(bankrolls, use_container_width=True)

        st.download_button(
            "Download results (CSV)",
            data=results_df.to_csv(index=False),
            file_name="value_bets_simulation.csv",
            mime="text/csv"
        )
else:
    st.info("Waiting for your fights file...")
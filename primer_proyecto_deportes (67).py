# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import requests

# --- CONFIG ---
MODEL_PATH = 'ufc_model.pkl'
ODDS_API_KEY = '2badf82dc7f07b14417700ad7df50886'  # <<-- Replace with your key
SPORT = 'mma_mixed_martial_arts'
REGION = 'us'
MARKET = 'h2h'  # head-to-head odds

# --- Load Model ---
@st.cache_data
def load_model(path):
    return joblib.load(path)

model = load_model(MODEL_PATH)

# --- Fetch Upcoming Events ---
def fetch_upcoming_odds():
    url = f'https://api.the-odds-api.com/v4/sports/{SPORT}/odds/?apiKey={ODDS_API_KEY}&regions={REGION}&markets={MARKET}&oddsFormat=decimal'
    resp = requests.get(url)
    if resp.status_code != 200:
        st.error("Error fetching odds: " + resp.text)
        return pd.DataFrame()
    data = resp.json()
    # Transform JSON into DataFrame (adapt fields as needed)
    rows = []
    for event in data:
        fight_name = event['home_team'] + " vs " + event['away_team']
        start_time = event['commence_time']
        for site in event['bookmakers']:
            odds = {outcome['name']: float(outcome['price']) for outcome in site['markets'][0]['outcomes']}
            rows.append({
                'event_name': fight_name,
                'start_time': start_time,
                'RedFighter': event['home_team'],
                'BlueFighter': event['away_team'],
                'RedOdds': odds.get(event['home_team'], np.nan),
                'BlueOdds': odds.get(event['away_team'], np.nan),
                'bookmaker': site['title']
            })
    return pd.DataFrame(rows)

upcoming_df = fetch_upcoming_odds()
if upcoming_df.empty:
    st.warning("No upcoming fights found or failed to fetch odds.")
    st.stop()

# --- Feature Engineering (match model) ---
# Fill with default/zero values for features your model expects but which the API doesn't provide
for col in ['WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif', 'RedExpectedValue', 'BlueExpectedValue']:
    if col not in upcoming_df.columns:
        upcoming_df[col] = 0.0  # You may want to improve this by merging with fighter stats!

# Put columns in order your model expects:
model_features = ['RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
                  'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif']
for col in model_features:
    if col not in upcoming_df.columns:
        upcoming_df[col] = 0.0  # extra safety

X_pred = upcoming_df[model_features]
pred_probs = model.predict_proba(X_pred)[:,1]  # Probability Red wins
upcoming_df['RedProb'] = pred_probs
upcoming_df['BlueProb'] = 1 - pred_probs

# --- Value Bet Calculation ---
upcoming_df['RedEdge'] = upcoming_df['RedProb'] - (1 / upcoming_df['RedOdds'])
upcoming_df['BlueEdge'] = upcoming_df['BlueProb'] - (1 / upcoming_df['BlueOdds'])

edge_thresh = st.slider("Value Bet Minimum Edge (%)", 5, 30, 10) / 100

value_bets = []
for idx, row in upcoming_df.iterrows():
    if row['RedEdge'] > edge_thresh:
        value_bets.append({**row, 'BetOn': 'Red', 'ModelProb': row['RedProb'], 'Edge': row['RedEdge'], 'Odds': row['RedOdds']})
    elif row['BlueEdge'] > edge_thresh:
        value_bets.append({**row, 'BetOn': 'Blue', 'ModelProb': row['BlueProb'], 'Edge': row['BlueEdge'], 'Odds': row['BlueOdds']})

value_bets_df = pd.DataFrame(value_bets)
st.subheader("Upcoming Value Bets")
if not value_bets_df.empty:
    st.dataframe(value_bets_df[['event_name', 'start_time', 'bookmaker', 'BetOn', 'Odds', 'ModelProb', 'Edge']])
else:
    st.info("No value bets found for the current edge threshold.")

# --- No Simulation Stats ---
st.markdown("> **Simulation stats only apply to historical fights with known results.**\n For upcoming fights, only value bet opportunities are shown.")
# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Utility function for expected value
def expected_value(prob, odds):
    return prob * (odds - 1) - (1 - prob)

# App title
st.title("UFC Value Betting & Bankroll Simulator")

# 1. Load model and data
uploaded_model = st.file_uploader("Upload your model (.pkl)", type=["pkl"])
uploaded_data = st.file_uploader("Upload your dataset (.csv)", type=["csv"])

if uploaded_model and uploaded_data:
    model = joblib.load(uploaded_model)
    df = pd.read_csv(uploaded_data)

    # --- Ensure column names match the model's expected features ---
    feature_cols = ['RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
                    'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif']
    # Add missing EV columns as zeros for prediction (required by model)
    for col in ['RedExpectedValue', 'BlueExpectedValue']:
        if col not in df.columns:
            df[col] = 0

    # Only use features the model expects
    X = df[feature_cols]

    # --- Predict probabilities ---
    probs = model.predict_proba(X)[:, 1]  # Probability Red wins
    df['RedProb'] = probs
    df['BlueProb'] = 1 - probs

    # --- Calculate real expected values ---
    df['RedExpectedValue'] = expected_value(df['RedProb'], df['RedOdds'])
    df['BlueExpectedValue'] = expected_value(df['BlueProb'], df['BlueOdds'])

    # --- Value bet filter ---
    value_threshold = st.slider("Value bet threshold (%)", 1, 20, 5)
    value_threshold_decimal = value_threshold / 100

    red_value_bets = df[df['RedExpectedValue'] > value_threshold_decimal]
    blue_value_bets = df[df['BlueExpectedValue'] > value_threshold_decimal]

    st.header("Value Bets (Red)")
    st.dataframe(red_value_bets[['r_fighter', 'b_fighter', 'RedOdds', 'RedProb', 'RedExpectedValue']])

    st.header("Value Bets (Blue)")
    st.dataframe(blue_value_bets[['r_fighter', 'b_fighter', 'BlueOdds', 'BlueProb', 'BlueExpectedValue']])

    # --- Bankroll simulation ---
    st.header("Bankroll Simulation")
    initial_bankroll = st.number_input("Initial Bankroll ($)", 100, 100000, 1000, step=100)
    flat_bet_size = st.number_input("Flat Bet Size ($)", 1, 1000, 10, step=1)

    # Combine value bets
    bets = []
    for _, row in red_value_bets.iterrows():
        bets.append({'fighter': row['r_fighter'], 'odds': row['RedOdds'], 'prob': row['RedProb'],
                     'ev': row['RedExpectedValue'], 'bet_side': 'Red', 'win': 1 if row['winner'] == 'Red' else 0})
    for _, row in blue_value_bets.iterrows():
        bets.append({'fighter': row['b_fighter'], 'odds': row['BlueOdds'], 'prob': row['BlueProb'],
                     'ev': row['BlueExpectedValue'], 'bet_side': 'Blue', 'win': 1 if row['winner'] == 'Blue' else 0})
    bets_df = pd.DataFrame(bets)

    # Simulate bankroll
    bankroll = [initial_bankroll]
    for i, row in bets_df.iterrows():
        result = flat_bet_size * (row['odds'] - 1) if row['win'] else -flat_bet_size
        bankroll.append(bankroll[-1] + result)
    bets_df['Bankroll'] = bankroll[1:]

    st.line_chart(bets_df['Bankroll'])

    # --- Stats summary ---
    st.header("Stats Summary")
    st.write(f"Total Bets: {len(bets_df)}")
    st.write(f"Wins: {bets_df['win'].sum()} / Losses: {len(bets_df) - bets_df['win'].sum()}")
    st.write(f"Final Bankroll: ${bankroll[-1]:.2f}")
    st.write(f"ROI: {((bankroll[-1] - initial_bankroll) / initial_bankroll) * 100:.2f}%")

    st.dataframe(bets_df)

else:
    st.info("Please upload both the model (.pkl) and the dataset (.csv).")
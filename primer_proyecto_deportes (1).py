# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
from sklearn.linear_model import LogisticRegression
from sklearn.calibration import CalibratedClassifierCV
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import uniform
from datetime import datetime, timedelta

# Page configuration
st.set_page_config(page_title="UFC Value Bet Dashboard", layout="wide")

# Helpers
@st.cache_data
def load_history(path: str = 'ufc-master.csv') -> pd.DataFrame:
    return pd.read_csv(path)

@st.cache_resource
def train_model() -> tuple:
    df = load_history()
    features = [
        'RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
        'WinStreakDif', 'LossDif', 'KODif', 'SubDif',
        'HeightDif', 'ReachDif', 'AgeDif'
    ]
    df_train = df[features + ['Winner']].dropna()
    le = LabelEncoder()
    df_train['WinnerEnc'] = le.fit_transform(df_train['Winner'])
    X = df_train[features]
    y = df_train['WinnerEnc']
    base_model = LogisticRegression(C=1.23, max_iter=1000, solver='lbfgs', random_state=42)
    calibrator = CalibratedClassifierCV(base_model, method='isotonic', cv=5)
    calibrator.fit(X, y)
    return calibrator, features

@st.cache_data
def fetch_live_odds(api_key: str) -> list:
    url = 'https://api.the-odds-api.com/v4/sports/mma_mixed_martial_arts/odds'
    params = {
        'apiKey': api_key,
        'regions': 'us',
        'markets': 'h2h',
        'oddsFormat': 'american'
    }
    resp = requests.get(url, params=params)
    resp.raise_for_status()
    return resp.json()

# Convert American odds to implied probability
def implied_prob(o: float) -> float:
    return 100.0/(o+100.0) if o > 0 else abs(o)/(abs(o)+100.0)

# Main application
def main():
    # Sidebar inputs
    st.sidebar.header("Settings")
    api_key = st.sidebar.text_input("Odds API Key", type="password")
    edge_threshold = st.sidebar.slider("Edge Threshold (pp)", 0, 100, 15)
    days_ahead = st.sidebar.slider("Show events in next N days", 1, 30, 7)
    filter_str = st.sidebar.text_input("Filter matchups (comma-separated)")

    # Parse filters
    if filter_str and filter_str.strip():
        filters = [term.strip().lower() for term in filter_str.split(",") if term.strip()]
    else:
        filters = []

    st.title("UFC Value Bet Dashboard")

    # Require API key
    if not api_key:
        st.warning("Enter your Odds API key in the sidebar to continue.")
        return

    # Load and train model
    df_hist = load_history()
    model, features = train_model()

    # Historical preview
    st.subheader("Historical Data Preview")
    st.dataframe(df_hist.head(5))

    # Fetch live odds
    events = fetch_live_odds(api_key)
    now = datetime.utcnow()
    cutoff = now + timedelta(days=days_ahead)
    odds_rows = []
    for ev in events:
        for bm in ev.get('bookmakers', []):
            markets = bm.get('markets', [])
            if not markets:
                continue
            mkt = markets[0]
            outcomes = mkt.get('outcomes', [])
            if len(outcomes) != 2:
                continue
            try:
                ev_time = datetime.fromisoformat(ev['commence_time'].replace('Z',''))
            except:
                continue
            if not (now <= ev_time <= cutoff):
                continue
            f1, f2 = outcomes[0]['name'], outcomes[1]['name']
            event_name = f"{f1} vs {f2}"
            if filters and not any(f in event_name.lower() for f in filters):
                continue
            odds_rows.append({
                'Event': event_name,
                'Time (UTC)': ev['commence_time'],
                f1: outcomes[0]['price'],
                f2: outcomes[1]['price']
            })
    df_odds = pd.DataFrame(odds_rows)

    st.subheader("Live Odds")
    if df_odds.empty:
        st.info("No upcoming fights match your criteria.")
        return
    st.dataframe(df_odds)

    # Compute value bets
    st.subheader(f"Value Bets (Edge â‰¥ {edge_threshold} pp)")
    value_bets = []
    for _, row in df_odds.iterrows():
        fighters = [c for c in row.index if c not in ['Event','Time (UTC)']]
        if len(fighters) != 2:
            continue
        f1, f2 = fighters
        o1, o2 = row[f1], row[f2]
        # find historical match
        mask = ((df_hist['RedFighter'] == f1) & (df_hist['BlueFighter'] == f2)) \
               | ((df_hist['RedFighter'] == f2) & (df_hist['BlueFighter'] == f1))
        hist = df_hist[mask]
        if hist.empty:
            continue
        idx = hist.index[0]
        prob = model.predict_proba(hist.loc[[idx], features])[0]
        for fighter, odds, side in [(f1, o1, 'Red'), (f2, o2, 'Blue')]:
            ip = implied_prob(odds)
            p = prob[1] if side == 'Red' else prob[0]
            edge = (p - ip) * 100
            if edge >= edge_threshold:
                value_bets.append({
                    'Event': row['Event'],
                    'Fighter': fighter,
                    'Side': side,
                    'Odds': odds,
                    'Edge (pp)': round(edge,1)
                })
    if value_bets:
        df_vb = pd.DataFrame(value_bets).sort_values('Edge (pp)', ascending=False)
        st.table(df_vb)
    else:
        st.info("No value bets meet your threshold.")

    # Staking strategy simulation
    st.subheader("Staking Strategy Simulation")
    BASE_EDGE, SAFE_EDGE = 5, 10
    BASE_STAKE, SAFE_STAKE = 0.02, 0.15
    bankroll = 10000.0
    balances = []
    for bet in value_bets:
        frac = SAFE_STAKE if bet['Edge (pp)'] >= SAFE_EDGE else BASE_STAKE
        stake = bankroll * frac
        odds = bet['Odds']
        payout = stake * (odds/100) if odds > 0 else stake * (100/abs(odds))
        profit = payout if bet['Side'] == ('Red' if bet['Event'].split(' vs ')[0] == bet['Fighter'] else 'Blue') else -stake
        bankroll += profit
        balances.append(bankroll)
    if balances:
        st.line_chart(pd.DataFrame({'Bankroll': balances}, index=pd.RangeIndex(start=1, stop=len(balances)+1)))
    st.write(f"**Initial Bankroll:** $10,000")
    st.write(f"**Final Bankroll:** ${bankroll:,.2f}")
    st.write(f"**ROI:** {((bankroll-10000.0)/10000.0*100):.1f}%")

if __name__ == '__main__':
    main()
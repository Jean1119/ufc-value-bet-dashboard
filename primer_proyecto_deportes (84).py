# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt

st.set_page_config(layout="wide", page_title="UFC Value Bets Dashboard")

st.title("üìä UFC Value Bets Dashboard")
st.write(
    "Sube tu archivo CSV de apuestas de valor (ejemplo: `your_merged_historical_dataset (2).csv` o el que generaste). "
    "El dashboard muestra solo las peleas FUTURAS y te permite filtrar y ordenar."
)

# --- FILE UPLOADER ---
uploaded_file = st.file_uploader(
    "Sube tu archivo CSV aqu√≠",
    type="csv"
)
if uploaded_file is None:
    st.warning("Por favor, sube tu archivo CSV para continuar.")
    st.stop()

df = pd.read_csv(uploaded_file)

# --- FECHA DE FILTRO ---
# Asume que tienes columna 'start_time' o similar
# Si es necesario, adapta el nombre de columna aqu√≠:
date_col = None
for possible in ['start_time', 'date', 'event_date', 'fight_date']:
    if possible in df.columns:
        date_col = possible
        break

if date_col:
    # Intentar convertir a datetime
    df[date_col] = pd.to_datetime(df[date_col], errors='coerce')
    today = pd.Timestamp.now(tz='UTC').normalize()
    future_mask = (df[date_col] >= today) | (df[date_col].isna())  # Si no hay fecha, mostrar igual por si acaso
    df_future = df[future_mask].copy()
    st.success(f"Filtrando solo peleas futuras (>= {today.date()}) seg√∫n la columna '{date_col}'")
else:
    df_future = df.copy()
    st.warning("No se encontr√≥ columna de fecha. Mostrando TODO el archivo. Si quieres filtrar peleas futuras, aseg√∫rate de tener una columna llamada `start_time`, `date`, `event_date` o `fight_date` en tu CSV.")

# --- FILTROS AVANZADOS ---
with st.expander("üîç Filtros avanzados"):
    evento = st.multiselect("Filtra por evento:", sorted(df_future['event'].unique()), default=None)
    luchador = st.multiselect("Filtra por luchador:", sorted(df_future['bet_on'].unique()), default=None)
    min_edge = st.slider("Filtra por m√≠nimo edge (%)", min_value=0.0, max_value=1.0, value=0.05, step=0.01)
    sort_col = st.selectbox("Ordenar por:", options=df_future.columns, index=list(df_future.columns).index('edge') if 'edge' in df_future.columns else 0)
    sort_order = st.radio("Orden ascendente/descendente", ["Descendente", "Ascendente"], index=0)

# Aplicar filtros
filtered = df_future.copy()
if evento:
    filtered = filtered[filtered['event'].isin(evento)]
if luchador:
    filtered = filtered[filtered['bet_on'].isin(luchador)]
filtered = filtered[filtered['edge'] >= min_edge]
filtered = filtered.sort_values(by=sort_col, ascending=(sort_order == "Ascendente"))

st.markdown(f"### Total de apuestas de valor detectadas: **{len(filtered)}**")
st.dataframe(filtered, use_container_width=True)

# --- GRAFICO ROI ACUMULADO SI EXISTE COLUMNA DE FECHA ---
if date_col and 'edge' in filtered.columns:
    filtered = filtered.sort_values(by=date_col)
    filtered['profit'] = filtered['edge']  # O adapta si tienes columna de profit real
    filtered['cum_profit'] = filtered['profit'].cumsum()
    filtered['num_bets'] = range(1, len(filtered) + 1)
    filtered['roi'] = filtered['cum_profit'] / filtered['num_bets']

    st.markdown("#### Evoluci√≥n de ROI acumulado")
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.plot(filtered[date_col], filtered['roi'], marker='o')
    ax.set_xlabel("Fecha")
    ax.set_ylabel("ROI acumulado")
    ax.set_title("ROI acumulado en apuestas futuras")
    st.pyplot(fig)

st.caption("Powered by Streamlit. Si necesitas ayuda extra o quieres calcular ROI real, solo d√≠melo.")
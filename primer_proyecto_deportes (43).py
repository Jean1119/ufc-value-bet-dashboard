# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle

st.set_page_config(page_title="UFC Value Bets & Bankroll Simulator", layout="wide")

st.title("UFC Value Bets & Bankroll Simulator")

# --- 1. Load model ---
@st.cache_resource
def load_model(path):
    with open(path, "rb") as f:
        return pickle.load(f)

# --- 2. Load data ---
@st.cache_data
def load_data(path):
    return pd.read_csv(path)

model_path = "ufc_model.pkl"
data_path = "your_merged_historical_dataset.csv"

model = load_model(model_path)
df = load_data(data_path)

# --- 3. Match/model feature names exactly ---
model_features = [
    'RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
    'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif',
    'ReachDif', 'AgeDif'
]

# -- Optionally map/correct names here if not matching
for col in model_features:
    if col not in df.columns:
        # Try lowercase fallback (common in merges)
        if col.lower() in df.columns:
            df[col] = df[col.lower()]
        elif col.upper() in df.columns:
            df[col] = df[col.upper()]
        else:
            df[col] = 0  # fallback default if totally missing

# --- 4. Fill NaN for prediction columns ---
X = df[model_features].fillna(0)

# --- 5. Predict probabilities (Red wins) ---
try:
    probs = model.predict_proba(X)[:, 1]
except Exception as e:
    st.error(f"Prediction error: {e}")
    st.stop()

df['RedProb'] = probs
df['BlueProb'] = 1 - probs

# --- 6. Value Bet logic (5% edge over book odds implied prob) ---
df['RedImplied'] = 1 / df['RedOdds']
df['BlueImplied'] = 1 / df['BlueOdds']
df['RedValue'] = df['RedProb'] - df['RedImplied']
df['BlueValue'] = df['BlueProb'] - df['BlueImplied']

value_bets = df[
    ((df['RedValue'] >= 0.05) | (df['BlueValue'] >= 0.05))
].copy()

def pick_side(row):
    if row['RedValue'] >= 0.05 and row['RedValue'] >= row['BlueValue']:
        return "Red"
    elif row['BlueValue'] >= 0.05:
        return "Blue"
    return "None"

value_bets['Pick'] = value_bets.apply(pick_side, axis=1)

# --- 7. Simulate bankroll (Flat $100/unit per value bet) ---
initial_bankroll = st.number_input("Initial bankroll", min_value=100, value=1000, step=100)
stake = st.number_input("Stake per value bet ($)", min_value=1, value=100, step=10)

bankroll = initial_bankroll
results = []
for idx, row in value_bets.iterrows():
    if row['Pick'] == "Red":
        odds = row['RedOdds']
        won = (row['winner'].lower() == 'red')
    elif row['Pick'] == "Blue":
        odds = row['BlueOdds']
        won = (row['winner'].lower() == 'blue')
    else:
        continue
    profit = (stake * (odds - 1)) if won else -stake
    bankroll += profit
    results.append(profit)

value_bets['Profit'] = results + [0] * (len(value_bets) - len(results))
value_bets['Bankroll'] = initial_bankroll + np.cumsum(value_bets['Profit'])

# --- 8. Value bet stats ---
n_bets = len(value_bets)
roi = 100 * (value_bets['Profit'].sum() / (n_bets * stake)) if n_bets > 0 else 0
hit_rate = 100 * (value_bets['Profit'] > 0).sum() / n_bets if n_bets > 0 else 0
final_bankroll = value_bets['Bankroll'].iloc[-1] if n_bets > 0 else initial_bankroll

# --- 9. Display ---
st.subheader("Summary")
col1, col2, col3, col4 = st.columns(4)
col1.metric("Value Bets", n_bets)
col2.metric("ROI (%)", f"{roi:.2f}")
col3.metric("Hit Rate (%)", f"{hit_rate:.1f}")
col4.metric("Final Bankroll", f"${final_bankroll:,.2f}")

st.line_chart(value_bets['Bankroll'], use_container_width=True)

st.subheader("Value Bets Table")
st.dataframe(value_bets[['event_name', 'r_fighter', 'b_fighter', 'winner', 'RedOdds', 'BlueOdds', 'RedProb', 'BlueProb', 'RedValue', 'BlueValue', 'Pick', 'Profit', 'Bankroll']])

st.caption("This app shows value bets where your predicted win probability exceeds the bookmaker implied probability by at least 5%. Bankroll simulation assumes a flat unit bet per value pick. Adjust your own stake and starting bankroll as desired.")

# -- End --
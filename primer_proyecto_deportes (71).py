# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import requests
import unicodedata
from datetime import datetime

# --- CONFIG ---
MODEL_PATH = 'ufc_model.pkl'
ODDS_API_KEY = st.secrets.get("ODDS_API_KEY", "")
FIGHTER_IMAGES = st.secrets.get("fighter_images", {})

APP_LOGO = "https://upload.wikimedia.org/wikipedia/commons/0/04/UFC_logo.svg"
HEADER_BG = "https://media.giphy.com/media/3o7TKH4D5Z3tRxM3jC/giphy.gif"  # Animated GIF background

# --- SIDEBAR SETTINGS ---
st.sidebar.image(APP_LOGO, width=120)
st.sidebar.title("‚öôÔ∏è Settings")
edge_thresh = st.sidebar.slider("Value Bet Minimum Edge (%)", 5, 30, 10, help="Only bets with edge above this % are shown.") / 100
color = st.sidebar.color_picker("Pick Highlight Color", "#f63366")

with st.sidebar.expander("‚ÑπÔ∏è About This App"):
    st.markdown("""
    **UFC Value Bet Finder**
    - Powered by live odds & machine learning
    - Finds MMA value bets where the model predicts higher win probability than the market implies
    - For entertainment & educational purposes only.
    """)

# --- STREAMLIT-SAFE HEADER (NO SCRIPTS) ---
st.markdown(
    f"""
    <div style="
        background: url('{HEADER_BG}');
        background-size: cover;
        background-position: center;
        padding: 34px 22px 22px 22px;
        border-radius: 18px;
        box-shadow: 0 4px 24px #0004;
        display: flex;
        align-items: center;
        margin-bottom: 24px;
        min-height: 120px;
        border: 2px solid {color}66;
    ">
        <img src="{APP_LOGO}" width="95" style="border-radius:14px; box-shadow:0 4px 16px #0006; margin-right:30px;">
        <div>
            <h1 style="color:white; margin-bottom:0; font-size:2.4em; letter-spacing:1px; font-family:sans-serif;">
                ü•ä <span style="color:{color};">UFC Value Bet Finder</span>
            </h1>
            <div style="color:#ffeeaa; font-size:1.18em; font-weight:bold; font-family:sans-serif;">
                Machine learning meets fight night!
            </div>
            <div style="color:#f6f7fa; font-size:1.05em; margin-top:4px;">
                <span style="font-weight:normal;">Find smart bets on upcoming MMA fights.</span>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True
)
st.write(" ")

# --- UTILS: Fighter Name Conversion for Secrets Lookup ---
def slugify_fighter_name(name):
    name = (
        unicodedata.normalize("NFKD", name)
        .encode("ascii", "ignore")
        .decode("ascii")
        .replace("-", " ")
        .replace("'", "")
        .replace(".", "")
    )
    return "_".join(name.strip().lower().split())

def get_fighter_image(name):
    key = slugify_fighter_name(name)
    url = FIGHTER_IMAGES.get(key)
    if url:
        return url
    return "https://static.vecteezy.com/system/resources/previews/022/734/495/original/mma-or-ufc-fighter-silhouette-illustration-vector.jpg"

# --- Load Model ---
@st.cache_data
def load_model(path):
    return joblib.load(path)

model = load_model(MODEL_PATH)

# --- Fetch Upcoming Events ---
@st.cache_data(show_spinner=False)
def fetch_upcoming_odds():
    url = f'https://api.the-odds-api.com/v4/sports/mma_mixed_martial_arts/odds/?apiKey={ODDS_API_KEY}&regions=us&markets=h2h&oddsFormat=decimal'
    resp = requests.get(url)
    if resp.status_code != 200:
        st.error("Error fetching odds: " + resp.text)
        return pd.DataFrame()
    data = resp.json()
    rows = []
    for event in data:
        fight_name = event['home_team'] + " vs " + event['away_team']
        start_time = pd.to_datetime(event['commence_time']).strftime('%Y-%m-%d %H:%M')
        for site in event['bookmakers']:
            odds = {outcome['name']: float(outcome['price']) for outcome in site['markets'][0]['outcomes']}
            rows.append({
                'event_name': fight_name,
                'start_time': start_time,
                'RedFighter': event['home_team'],
                'BlueFighter': event['away_team'],
                'RedOdds': odds.get(event['home_team'], np.nan),
                'BlueOdds': odds.get(event['away_team'], np.nan),
                'bookmaker': site['title']
            })
    return pd.DataFrame(rows)

with st.spinner('Fetching upcoming fight odds...'):
    upcoming_df = fetch_upcoming_odds()

if upcoming_df.empty:
    st.markdown(
        f"<div style='background:{color}; color:white; padding:18px; border-radius:10px;'>‚ö†Ô∏è <b>No upcoming fights found or failed to fetch odds.</b></div>",
        unsafe_allow_html=True
    )
    st.stop()

# --- Feature Engineering (match model) ---
default_features = ['WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif', 'RedExpectedValue', 'BlueExpectedValue']
for col in default_features:
    if col not in upcoming_df.columns:
        upcoming_df[col] = 0.0

model_features = ['RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
                  'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif']
for col in model_features:
    if col not in upcoming_df.columns:
        upcoming_df[col] = 0.0

# --- Predict Win Probabilities ---
X_pred = upcoming_df[model_features]
pred_probs = model.predict_proba(X_pred)[:,1]  # Probability Red wins
upcoming_df['RedProb'] = pred_probs
upcoming_df['BlueProb'] = 1 - pred_probs

# --- Value Bet Calculation ---
upcoming_df['RedEdge'] = upcoming_df['RedProb'] - (1 / np.maximum(upcoming_df['RedOdds'], 1.01))
upcoming_df['BlueEdge'] = upcoming_df['BlueProb'] - (1 / np.maximum(upcoming_df['BlueOdds'], 1.01))

value_bets = []
for idx, row in upcoming_df.iterrows():
    if row['RedEdge'] > edge_thresh:
        value_bets.append({**row, 'BetOn': row['RedFighter'], 'ModelProb': row['RedProb'], 'Edge': row['RedEdge'], 'Odds': row['RedOdds']})
    elif row['BlueEdge'] > edge_thresh:
        value_bets.append({**row, 'BetOn': row['BlueFighter'], 'ModelProb': row['BlueProb'], 'Edge': row['BlueEdge'], 'Odds': row['BlueOdds']})

value_bets_df = pd.DataFrame(value_bets)

# --- COLORFUL VALUE BETS TABLE ---
def style_value_bets(df):
    def highlight_edge(val):
        try:
            percent = float(str(val).strip('%'))
            color = "#44d27b" if percent > 10 else ""
        except:
            color = ""
        return f'background-color: {color}; color: #14173b;' if color else ''
    def highlight_prob(val):
        try:
            percent = float(str(val).strip('%'))
            col = "#ffe36e" if percent > 60 else ""
        except:
            col = ""
        return f'background-color: {col}; color: #14173b;' if col else ''
    return df.style.applymap(highlight_edge, subset=['Edge %']) \
                  .applymap(highlight_prob, subset=['Model Win %']) \
                  .set_properties(**{'font-weight': 'bold'})

st.markdown(
    f"<div style='margin-top:28px; background:{color}15; border-radius:10px; padding:14px;'>"
    "<h2 style='color:#1c2241;'>üî• Value Bet Opportunities</h2></div>", unsafe_allow_html=True
)
if not value_bets_df.empty:
    value_bets_df_display = value_bets_df.copy()
    value_bets_df_display['ModelProb'] = (value_bets_df_display['ModelProb']*100).round(1).astype(str) + '%'
    value_bets_df_display['Edge'] = (value_bets_df_display['Edge']*100).round(1).astype(str) + '%'
    value_bets_df_display = value_bets_df_display.rename(columns={
        'event_name': 'Fight',
        'start_time': 'Start Time',
        'bookmaker': 'Bookmaker',
        'BetOn': 'Bet On',
        'Odds': 'Odds',
        'ModelProb': 'Model Win %',
        'Edge': 'Edge %'
    })
    st.dataframe(
        style_value_bets(value_bets_df_display[['Fight', 'Start Time', 'Bookmaker', 'Bet On', 'Odds', 'Model Win %', 'Edge %']]),
        use_container_width=True,
        height=420
    )
else:
    st.markdown(
        f"<div style='background:#ffeeaa; color:#333; padding:18px; border-radius:10px;'>"
        "No value bets found for the current edge threshold. Try lowering the slider.</div>",
        unsafe_allow_html=True
    )

# --- DETAILED FIGHTS SECTION WITH IMAGES ---
st.markdown(
    f"<div style='margin-top:30px; background:{color}11; border-radius:10px; padding:13px;'>"
    "<h3 style='color:#f63366;'>üîé Explore All Upcoming Fights & Odds</h3></div>", unsafe_allow_html=True
)
for fight_name, group in upcoming_df.groupby('event_name'):
    red = group.iloc[0]['RedFighter']
    blue = group.iloc[0]['BlueFighter']
    with st.expander(f"üí• {fight_name}"):
        c1, c2, c3 = st.columns([2, 2, 2])
        with c1:
            st.image(get_fighter_image(red), width=110, caption=f"üü• {red}")
        with c2:
            st.markdown(
                f"<div style='text-align:center; font-size:1.2em; font-weight:bold; color:{color};'>VS</div>",
                unsafe_allow_html=True
            )
            st.markdown(
                f"<div style='text-align:center; color:#1c2241;'>"
                f"<b>Start Time:</b> <span style='color:{color};'>{group.iloc[0]['start_time']}</span></div>",
                unsafe_allow_html=True
            )
        with c3:
            st.image(get_fighter_image(blue), width=110, caption=f"üü¶ {blue}")
        st.write("")
        show_probs = pd.DataFrame({
            'Bookmaker': group['bookmaker'],
            f"{red} Odds": group['RedOdds'],
            f"{blue} Odds": group['BlueOdds'],
            f"{red} Model Win %": (group['RedProb']*100).round(1),
            f"{blue} Model Win %": (group['BlueProb']*100).round(1),
        })
        st.table(show_probs)

# --- ADVANCED: SHOW ALL FEATURES ---
if st.checkbox("Show advanced stats (all model input columns)"):
    st.dataframe(upcoming_df, use_container_width=True)

st.markdown(
    f"""
    <div style="margin-top:28px; font-size:1.1em; color:#fff; background:linear-gradient(90deg,{color}cc,#1c2241cc); border-radius:10px; padding:16px;">
    <b>Note:</b> Simulation stats only apply to historical fights with known results.
    For upcoming fights, only value bet opportunities are shown.
    </div>
    """, unsafe_allow_html=True
)
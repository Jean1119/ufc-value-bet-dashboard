# -*- coding: utf-8 -*-
"""primer_proyecto_deportes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WRb6NZQkSIhEATar2c2wey0OyUfbX3u
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import requests
from datetime import datetime

# --- CONFIG ---
MODEL_PATH = 'ufc_model.pkl'
ODDS_API_KEY = st.secrets["ODDS_API_KEY"] if "ODDS_API_KEY" in st.secrets else "YOUR_KEY_HERE"
SPORT = 'mma_mixed_martial_arts'
REGION = 'us'
MARKET = 'h2h'  # head-to-head odds

# --- Sidebar Settings ---
st.sidebar.title("⚙️ Settings")
edge_thresh = st.sidebar.slider("Value Bet Minimum Edge (%)", 5, 30, 10) / 100
st.sidebar.markdown("**Value Edge** is the difference between your model's probability and the implied probability from the odds. Bets above this edge are shown.")
if st.sidebar.button("🔄 Refresh Odds"):
    st.session_state.refresh = True
else:
    st.session_state.refresh = st.session_state.get("refresh", False)

with st.sidebar.expander("ℹ️ About This App"):
    st.markdown("""
    **UFC Value Bet Finder**
    Powered by live odds & machine learning!
    This tool finds MMA value bets where the model predicts higher win probability than the market implies.
    *For entertainment & educational purposes only.*
    """)

# --- Main Title and Description ---
st.title("🥊 UFC Value Bet Finder")
st.caption("Using machine learning & live odds to spot value bets in upcoming MMA fights.")

# --- Load Model ---
@st.cache_data
def load_model(path):
    return joblib.load(path)

model = load_model(MODEL_PATH)

# --- Fetch Upcoming Events ---
@st.cache_data(show_spinner=False)
def fetch_upcoming_odds():
    url = f'https://api.the-odds-api.com/v4/sports/{SPORT}/odds/?apiKey={ODDS_API_KEY}&regions={REGION}&markets={MARKET}&oddsFormat=decimal'
    resp = requests.get(url)
    if resp.status_code != 200:
        st.error("Error fetching odds: " + resp.text)
        return pd.DataFrame()
    data = resp.json()
    rows = []
    for event in data:
        fight_name = event['home_team'] + " vs " + event['away_team']
        start_time = pd.to_datetime(event['commence_time']).strftime('%Y-%m-%d %H:%M')
        for site in event['bookmakers']:
            odds = {outcome['name']: float(outcome['price']) for outcome in site['markets'][0]['outcomes']}
            rows.append({
                'event_name': fight_name,
                'start_time': start_time,
                'RedFighter': event['home_team'],
                'BlueFighter': event['away_team'],
                'RedOdds': odds.get(event['home_team'], np.nan),
                'BlueOdds': odds.get(event['away_team'], np.nan),
                'bookmaker': site['title']
            })
    return pd.DataFrame(rows)

# --- Load Odds with Progress Feedback ---
with st.spinner('Fetching upcoming fight odds...'):
    upcoming_df = fetch_upcoming_odds()

if upcoming_df.empty:
    st.warning("No upcoming fights found or failed to fetch odds.")
    st.stop()

# --- Feature Engineering (match model) ---
default_features = ['WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif', 'RedExpectedValue', 'BlueExpectedValue']
for col in default_features:
    if col not in upcoming_df.columns:
        upcoming_df[col] = 0.0

model_features = ['RedOdds', 'BlueOdds', 'RedExpectedValue', 'BlueExpectedValue',
                  'WinStreakDif', 'LossDif', 'KODif', 'SubDif', 'HeightDif', 'ReachDif', 'AgeDif']
for col in model_features:
    if col not in upcoming_df.columns:
        upcoming_df[col] = 0.0

# --- Predict Win Probabilities ---
X_pred = upcoming_df[model_features]
pred_probs = model.predict_proba(X_pred)[:,1]  # Probability Red wins
upcoming_df['RedProb'] = pred_probs
upcoming_df['BlueProb'] = 1 - pred_probs

# --- Value Bet Calculation ---
upcoming_df['RedEdge'] = upcoming_df['RedProb'] - (1 / np.maximum(upcoming_df['RedOdds'], 1.01))
upcoming_df['BlueEdge'] = upcoming_df['BlueProb'] - (1 / np.maximum(upcoming_df['BlueOdds'], 1.01))

value_bets = []
for idx, row in upcoming_df.iterrows():
    if row['RedEdge'] > edge_thresh:
        value_bets.append({**row, 'BetOn': row['RedFighter'], 'ModelProb': row['RedProb'], 'Edge': row['RedEdge'], 'Odds': row['RedOdds']})
    elif row['BlueEdge'] > edge_thresh:
        value_bets.append({**row, 'BetOn': row['BlueFighter'], 'ModelProb': row['BlueProb'], 'Edge': row['BlueEdge'], 'Odds': row['BlueOdds']})

value_bets_df = pd.DataFrame(value_bets)

# --- Expandable Value Bets Table ---
st.subheader("🔥 Value Bet Opportunities")
if not value_bets_df.empty:
    value_bets_df_display = value_bets_df.copy()
    value_bets_df_display['ModelProb'] = (value_bets_df_display['ModelProb']*100).round(1).astype(str) + '%'
    value_bets_df_display['Edge'] = (value_bets_df_display['Edge']*100).round(1).astype(str) + '%'
    value_bets_df_display = value_bets_df_display.rename(columns={
        'event_name': 'Fight',
        'start_time': 'Start Time',
        'bookmaker': 'Bookmaker',
        'BetOn': 'Bet On',
        'Odds': 'Odds',
        'ModelProb': 'Model Win %',
        'Edge': 'Edge %'
    })
    st.dataframe(
        value_bets_df_display[['Fight', 'Start Time', 'Bookmaker', 'Bet On', 'Odds', 'Model Win %', 'Edge %']],
        use_container_width=True
    )
else:
    st.info("No value bets found for the current edge threshold.")

# --- Detailed View per Event ---
st.subheader("🔎 Explore All Upcoming Fights & Odds")
for fight_name, group in upcoming_df.groupby('event_name'):
    with st.expander(fight_name):
        st.write(f"**Start Time:** {group.iloc[0]['start_time']}")
        fighters = f"{group.iloc[0]['RedFighter']} (Red) vs {group.iloc[0]['BlueFighter']} (Blue)"
        st.write(f"**Fighters:** {fighters}")
        show_probs = pd.DataFrame({
            'Bookmaker': group['bookmaker'],
            f"{group.iloc[0]['RedFighter']} Odds": group['RedOdds'],
            f"{group.iloc[0]['BlueFighter']} Odds": group['BlueOdds'],
            f"{group.iloc[0]['RedFighter']} Model Win %": (group['RedProb']*100).round(1),
            f"{group.iloc[0]['BlueFighter']} Model Win %": (group['BlueProb']*100).round(1),
        })
        st.table(show_probs)

# --- Advanced: Show all features/inputs (optional) ---
if st.checkbox("Show advanced stats (all model input columns)"):
    st.dataframe(upcoming_df, use_container_width=True)

st.markdown("""
> **Note:** Simulation stats only apply to historical fights with known results.
For upcoming fights, only value bet opportunities are shown.
""")

import pandas as pd
import numpy as np

# Paste your table data as a list of dicts or load as DataFrame
# For this example, I'll read your pasted rows into a DataFrame
from io import StringIO

raw = '''
fight,timestamp,bookmaker,bet_on,odds,model_prob,edge
Rayanne dos Santos vs Alice Ardelean,2025-05-31T22:00:00Z,BetOnline.ag,Blue,3.3,0.4912409232233824,0.18821062019307938
Rayanne dos Santos vs Alice Ardelean,2025-05-31T22:00:00Z,BetRivers,Blue,3.4,0.4912409232233824,0.19712327616455888
Rayanne dos Santos vs Alice Ardelean,2025-05-31T22:00:00Z,DraftKings,Blue,3.4,0.4912409232233824,0.19712327616455888
Rayanne dos Santos vs Alice Ardelean,2025-05-31T22:00:00Z,BetMGM,Blue,3.5,0.4912409232233824,0.20552663750909672
Rayanne dos Santos vs Alice Ardelean,2025-05-31T22:00:00Z,BetUS,Blue,3.46,0.4912409232233824,0.20222358218291997
Marquel Mederos vs Bolaji Oki,2025-05-31T22:00:00Z,BetOnline.ag,Red,2.6,0.5087590767766176,0.124143692161233
Marquel Mederos vs Bolaji Oki,2025-05-31T22:00:00Z,BetRivers,Red,2.43,0.5087590767766176,0.09723644303176165
Marquel Mederos vs Bolaji Oki,2025-05-31T22:00:00Z,DraftKings,Red,2.45,0.5087590767766176,0.10059581147049518
Marquel Mederos vs Bolaji Oki,2025-05-31T22:00:00Z,BetMGM,Red,2.55,0.5087590767766176,0.11660221403151949
Marquel Mederos vs Bolaji Oki,2025-05-31T22:00:00Z,BetUS,Red,2.58,0.5087590767766176,0.12116217755181141
Dustin Jacoby vs Bruno Lopes,2025-05-31T22:00:00Z,BetOnline.ag,Blue,2.55,0.4912409232233824,0.09908406047828433
Dustin Jacoby vs Bruno Lopes,2025-05-31T22:00:00Z,BetRivers,Blue,2.38,0.4912409232233824,0.07107285599649166
Dustin Jacoby vs Bruno Lopes,2025-05-31T22:00:00Z,DraftKings,Blue,2.4,0.4912409232233824,0.07457425655671573
Dustin Jacoby vs Bruno Lopes,2025-05-31T22:00:00Z,BetMGM,Blue,2.45,0.4912409232233824,0.08307765791726002
Dustin Jacoby vs Bruno Lopes,2025-05-31T22:00:00Z,BetUS,Blue,2.46,0.4912409232233824,0.08473685818273202
Zachary Reese vs Dusko Todorovic,2025-05-31T22:00:00Z,BetOnline.ag,Blue,3.35,0.4912409232233824,0.19273346053681528
Zachary Reese vs Dusko Todorovic,2025-05-31T22:00:00Z,BetRivers,Blue,3.1,0.4912409232233824,0.1686602780620921
Zachary Reese vs Dusko Todorovic,2025-05-31T22:00:00Z,DraftKings,Blue,3.3,0.4912409232233824,0.18821062019307938
Zachary Reese vs Dusko Todorovic,2025-05-31T22:00:00Z,BetUS,Blue,3.46,0.4912409232233824,0.20222358218291997
'''
# Add the rest of your sample if needed

df = pd.read_csv(StringIO(raw))

# Simulate results based on model probability (random outcome based on model)
np.random.seed(42)
df['rand'] = np.random.rand(len(df))
df['win'] = df['rand'] < df['model_prob']

# Bankroll simulation
bankroll = 1000
unit = 10
bet_records = []
for idx, row in df.iterrows():
    if row['win']:
        payout = unit * (row['odds'] - 1)
        bankroll += payout
        result = 'Win'
    else:
        bankroll -= unit
        payout = -unit
        result = 'Lose'
    bet_records.append({
        'fight': row['fight'],
        'bet_on': row['bet_on'],
        'odds': row['odds'],
        'result': result,
        'payout': payout
    })

results = pd.DataFrame(bet_records)
wins = (results['result'] == 'Win').sum()
losses = (results['result'] == 'Lose').sum()
roi = ((bankroll - 1000) / (unit * len(df))) * 100

print(f"Total Bets: {len(df)}")
print(f"Wins: {wins}")
print(f"Losses: {losses}")
print(f"Final Bankroll: {bankroll:.2f}")
print(f"ROI %: {roi:.2f}")
print("\nSample results:")
print(results.head(10))